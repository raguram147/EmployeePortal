{"ast":null,"code":"var _jsxFileName = \"/home/raguram_s/lister-emp-portal/src/components/FilterPage.js\";\nimport React, { Component } from 'react';\nimport '../components/styles/style.css';\nimport config from '../config'; // import Typography from '@material-ui/core/Typography';\n\nimport Slider from '@material-ui/core/Slider';\nimport NoResult from '../assets/noResult.gif';\nimport Chip from '@material-ui/core/Chip'; // import empGroup from '../assets/group-orange.png'\n\nimport { TextField } from \"@material-ui/core\"; // import { event } from 'jquery';\n\nimport { EmployeeCard } from './EmployeeCard';\nimport { Scrollbars } from 'react-custom-scrollbars';\nimport ClearIcon from '@material-ui/icons/Clear';\nimport { BsFillFunnelFill } from \"react-icons/bs\";\n/*\n  state variables and api data: 20-68 lines\n  onchange functions\n  filtering employees based on filter logic\n  req Data initializations\n  filters (Dynamic checkboxes,slider,input) html\n  displaying tags,emp cards,next/back button\n*/\n\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class EmployeeView extends Component {\n  constructor(props) {\n    super(props);\n\n    this.valueText = value => {\n      return `${value}`;\n    };\n\n    this.handleChange = (e, newValue) => {\n      // console.log(newValue);\n      this.setState({\n        ExperienceMinMax: newValue\n      });\n    };\n\n    this.myChangeHandler = event => {\n      let nam = event.target.name;\n      let val = event.target.value;\n      this.setState({\n        [nam]: val\n      });\n    };\n\n    this.handleDelete = chipToDelete => () => {\n      // console.log(chipToDelete);\n      let nam = chipToDelete.filterField;\n      var isChecked = false;\n      var item = chipToDelete.value;\n      ; // console.log(nam);\n      // console.log(isChecked);\n\n      if (nam === 'skill') {\n        this.setState(prevState => ({\n          checkedItemsSkills: prevState.checkedItemsSkills.set(item, isChecked)\n        }));\n        document.getElementById(item).checked = false; // console.log(event.target);\n      } else if (nam === 'manager') {\n        this.setState(prevState => ({\n          checkedItemsManager: prevState.checkedItemsManager.set(item, isChecked)\n        }));\n        document.getElementById(item).checked = false;\n      } else if (nam === 'pod') {\n        this.setState(prevState => ({\n          checkedItemsPod: prevState.checkedItemsPod.set(item, isChecked)\n        }));\n        document.getElementById(item).checked = false;\n      } else if (nam === 'project') {\n        this.setState(prevState => ({\n          checkedItemsProjects: prevState.checkedItemsProjects.set(item, isChecked)\n        }));\n        document.getElementById(item).checked = false;\n      } else if (nam === 'hobby') {\n        this.setState(prevState => ({\n          checkedItemsHobbies: prevState.checkedItemsHobbies.set(item, isChecked)\n        }));\n        document.getElementById(item).checked = false;\n      } else if (nam === 'EmpStatus') {\n        this.setState(prevState => ({\n          checkedItemsEmpStatus: prevState.checkedItemsEmpStatus.set(item, isChecked)\n        }));\n        document.getElementById(item).checked = false;\n      } else if (nam === 'EngagementType') {\n        this.setState(prevState => ({\n          checkedItemsEngagementType: prevState.checkedItemsEngagementType.set(item, isChecked)\n        }));\n        document.getElementById(item).checked = false;\n      } else if (nam === 'billable') {\n        this.setState(prevState => ({\n          checkedItemsBillable: prevState.checkedItemsBillable.set(item, isChecked)\n        }));\n        document.getElementById(item).checked = false;\n      }\n    };\n\n    this.state = {\n      Employees: [],\n      //api data\n      skillsApi: [],\n      MangersApi: [],\n      PodsApi: [],\n      projectsApi: [],\n      hobbiesApi: [],\n      employeeStatusApi: [],\n      billableApi: [],\n      engagementTypeApi: [],\n      skills: [],\n      name: '',\n      skillsFilterShow: 10,\n      //number of skill filters to be shown\n      projectsFilterShow: 10,\n      //number of projects filters to be shown\n      managersFilterShow: 10,\n      podsFilterShow: 10,\n      HobbiesFilterShow: 10,\n      skillsExpanded: false,\n      projectsExpanded: false,\n      managersExpanded: false,\n      podsExpanded: false,\n      hobbiesExpanded: false,\n      checkedItemsSkills: new Map(),\n      checkedItemsManager: new Map(),\n      checkedItemsPod: new Map(),\n      checkedItemsProjects: new Map(),\n      checkedItemsHobbies: new Map(),\n      checkedItemsEmpStatus: new Map(),\n      checkedItemsEngagementType: new Map(),\n      checkedItemsBillable: new Map(),\n      ExperienceMinMax: [0, 25],\n      filteredEmployee: [],\n      currentPage: 1,\n      maxItemsPerPage: 12,\n      checkedItemsTag: [],\n      skillsCheckBox: false\n    };\n    this.CheckBoxhandleChange = this.CheckBoxhandleChange.bind(this);\n    this.showMoreSkills = this.showMoreSkills.bind(this);\n    this.showMoreProjects = this.showMoreProjects.bind(this);\n    this.showMoreManagers = this.showMoreManagers.bind(this);\n    this.showMorePods = this.showMorePods.bind(this);\n    this.showMoreHobbies = this.showMoreHobbies.bind(this);\n  } //fetching data from api\n\n\n  componentDidMount() {\n    Promise.all([fetch(config.drupal_url + '/Employees').then(res => res.json()), fetch(config.drupal_url + '/TaxonomyOrder/skills').then(res => res.json()), fetch(config.drupal_url + '/TaxonomyOrder/manager').then(res => res.json()), fetch(config.drupal_url + '/TaxonomyOrder/pod').then(res => res.json()), fetch(config.drupal_url + '/TaxonomyOrder/projects').then(res => res.json()), fetch(config.drupal_url + '/TaxonomyOrder/hobbies').then(res => res.json()), fetch(config.drupal_url + '/Taxonomy/employee_status').then(res => res.json()), fetch(config.drupal_url + '/Taxonomy/engagement_model').then(res => res.json()), fetch(config.drupal_url + '/Taxonomy/billable').then(res => res.json())]).then(([urlOneData, urlTwoData, urlThreeData, urlFourData, urlFiveData, urlSixData, urlSevenData, urlEightData, urlNineData]) => {\n      this.setState({\n        Employees: urlOneData,\n        skillsApi: urlTwoData,\n        MangersApi: urlThreeData,\n        PodsApi: urlFourData,\n        projectsApi: urlFiveData,\n        hobbiesApi: urlSixData,\n        employeeStatusApi: urlSevenData,\n        engagementTypeApi: urlEightData,\n        billableApi: urlNineData\n      });\n    });\n  } //Experience slider on change calls the fxn and changes the values\n\n\n  CheckBoxhandleChange(event) {\n    //skills,project,pod,manager checkeditems change (to check uncheck)\n    let nam = event.target.name;\n    var isChecked = event.target.checked;\n    var item = event.target.value; // console.log(nam);\n    // console.log(isChecked);\n\n    if (nam === 'checkedItemsSkills') {\n      this.setState(prevState => ({\n        checkedItemsSkills: prevState.checkedItemsSkills.set(item, isChecked)\n      })); // document.getElementById(item).checked = true;\n    } else if (nam === 'checkedItemsManager') this.setState(prevState => ({\n      checkedItemsManager: prevState.checkedItemsManager.set(item, isChecked)\n    }));else if (nam === 'checkedItemsPod') this.setState(prevState => ({\n      checkedItemsPod: prevState.checkedItemsPod.set(item, isChecked)\n    }));else if (nam === 'checkedItemsProjects') this.setState(prevState => ({\n      checkedItemsProjects: prevState.checkedItemsProjects.set(item, isChecked)\n    }));else if (nam === 'checkedItemsHobbies') this.setState(prevState => ({\n      checkedItemsHobbies: prevState.checkedItemsHobbies.set(item, isChecked)\n    }));else if (nam === 'checkedItemsEmpStatus') this.setState(prevState => ({\n      checkedItemsEmpStatus: prevState.checkedItemsEmpStatus.set(item, isChecked)\n    }));else if (nam === 'checkedItemsEngagementType') this.setState(prevState => ({\n      checkedItemsEngagementType: prevState.checkedItemsEngagementType.set(item, isChecked)\n    }));else if (nam === 'checkedItemsBillable') this.setState(prevState => ({\n      checkedItemsBillable: prevState.checkedItemsBillable.set(item, isChecked)\n    }));\n  } //show more skill filter option\n\n\n  showMoreSkills() {\n    this.state.skillsFilterShow === 10 ? this.setState({\n      skillsFilterShow: this.state.skillsApi.length,\n      skillsExpanded: true\n    }) : this.setState({\n      skillsFilterShow: 10,\n      skillsExpanded: false\n    });\n  } //show more filter filter option\n\n\n  showMoreProjects() {\n    this.state.projectsFilterShow === 10 ? this.setState({\n      projectsFilterShow: this.state.projectsApi.length,\n      projectsExpanded: true\n    }) : this.setState({\n      projectsFilterShow: 10,\n      projectsExpanded: false\n    });\n  } //show more filter filter option this.state.managersExpanded\n\n\n  showMoreManagers() {\n    this.state.managersFilterShow === 10 ? this.setState({\n      managersFilterShow: this.state.MangersApi.length,\n      managersExpanded: true\n    }) : this.setState({\n      managersFilterShow: 10,\n      managersExpanded: false\n    });\n  } //show more filter filter option this.state.managersExpanded\n\n\n  showMorePods() {\n    this.state.podsFilterShow === 10 ? this.setState({\n      podsFilterShow: this.state.PodsApi.length,\n      podsExpanded: true\n    }) : this.setState({\n      podsFilterShow: 10,\n      podsExpanded: false\n    });\n  }\n\n  showMoreHobbies() {\n    this.state.HobbiesFilterShow === 10 ? this.setState({\n      HobbiesFilterShow: this.state.hobbiesApi.length,\n      hobbiesExpanded: true\n    }) : this.setState({\n      HobbiesFilterShow: 10,\n      hobbiesExpanded: false\n    });\n  } //next or back to view other emp cards if exists\n\n\n  changePage(direction) {\n    // console.log(direction);\n    if (direction === 'back') {\n      this.setState({\n        currentPage: this.state.currentPage - 1\n      });\n    } else if (direction === 'next') {\n      this.setState({\n        currentPage: this.state.currentPage + 1\n      });\n    }\n  }\n\n  AllCheckedItems() {\n    let skillsChecked = this.state.checkedItemsSkills;\n    let ManagersChecked = this.state.checkedItemsManager;\n    let podsChecked = this.state.checkedItemsPod;\n    let projectsChecked = this.state.checkedItemsProjects;\n    let HobbiesChecked = this.state.checkedItemsHobbies;\n    let EmpStatuschecked = this.state.checkedItemsEmpStatus;\n    let EngagementTypeChecked = this.state.checkedItemsEngagementType;\n    let billableChecked = this.state.checkedItemsBillable;\n    let checkedItemsTagList = []; //storing all the checked items in array to display as tags\n\n    if (skillsChecked.size > 0 || ManagersChecked.size > 0 || podsChecked.size > 0 || projectsChecked.size > 0 || HobbiesChecked.size > 0 || EmpStatuschecked.size > 0 || EngagementTypeChecked.size > 0 || billableChecked.size > 0) {\n      const iteratorS1 = skillsChecked.keys();\n      const iteratorS2 = skillsChecked.values();\n\n      for (let i = 0; i < skillsChecked.size; i++) {\n        let ps = iteratorS1.next().value;\n\n        if (iteratorS2.next().value) {\n          const tagsCheckedObj = {\n            value: ps,\n            filterField: \"skill\"\n          };\n          checkedItemsTagList.push(tagsCheckedObj);\n        }\n      }\n\n      const iteratorM1 = ManagersChecked.keys();\n      const iteratorM2 = ManagersChecked.values();\n\n      for (let i = 0; i < ManagersChecked.size; i++) {\n        let ps = iteratorM1.next().value;\n\n        if (iteratorM2.next().value) {\n          let tagsCheckedObj = {\n            value: ps,\n            filterField: \"manager\"\n          };\n          checkedItemsTagList.push(tagsCheckedObj);\n        }\n      }\n\n      const iteratorP1 = podsChecked.keys();\n      const iteratorP2 = podsChecked.values();\n\n      for (let i = 0; i < podsChecked.size; i++) {\n        let ps = iteratorP1.next().value;\n\n        if (iteratorP2.next().value) {\n          let tagsCheckedObj = {\n            value: ps,\n            filterField: \"pod\"\n          };\n          checkedItemsTagList.push(tagsCheckedObj);\n        }\n      }\n\n      const iteratorPr1 = projectsChecked.keys();\n      const iteratorPr2 = projectsChecked.values();\n\n      for (let i = 0; i < projectsChecked.size; i++) {\n        let ps = iteratorPr1.next().value;\n\n        if (iteratorPr2.next().value) {\n          let tagsCheckedObj = {\n            value: ps,\n            filterField: \"project\"\n          };\n          checkedItemsTagList.push(tagsCheckedObj);\n        }\n      }\n\n      const iteratorH1 = HobbiesChecked.keys();\n      const iteratorH2 = HobbiesChecked.values();\n\n      for (let i = 0; i < HobbiesChecked.size; i++) {\n        let ps = iteratorH1.next().value;\n\n        if (iteratorH2.next().value) {\n          let tagsCheckedObj = {\n            value: ps,\n            filterField: \"hobby\"\n          };\n          checkedItemsTagList.push(tagsCheckedObj);\n        }\n      }\n\n      const iteratorES1 = EmpStatuschecked.keys();\n      const iteratorES2 = EmpStatuschecked.values();\n\n      for (let i = 0; i < EmpStatuschecked.size; i++) {\n        let ps = iteratorES1.next().value;\n\n        if (iteratorES2.next().value) {\n          let tagsCheckedObj = {\n            value: ps,\n            filterField: \"EmpStatus\"\n          };\n          checkedItemsTagList.push(tagsCheckedObj);\n        }\n      }\n\n      const iteratorET1 = EngagementTypeChecked.keys();\n      const iteratorET2 = EngagementTypeChecked.values();\n\n      for (let i = 0; i < EngagementTypeChecked.size; i++) {\n        let ps = iteratorET1.next().value;\n\n        if (iteratorET2.next().value) {\n          let tagsCheckedObj = {\n            value: ps,\n            filterField: \"EngagementType\"\n          };\n          checkedItemsTagList.push(tagsCheckedObj);\n        }\n      }\n\n      const iteratorB1 = billableChecked.keys();\n      const iteratorB2 = billableChecked.values();\n\n      for (let i = 0; i < billableChecked.size; i++) {\n        let ps = iteratorB1.next().value;\n\n        if (iteratorB2.next().value) {\n          let tagsCheckedObj = {\n            value: ps,\n            filterField: \"billable\"\n          };\n          checkedItemsTagList.push(tagsCheckedObj);\n        }\n      } // console.log(billableChecked);\n      // console.log(EngagementTypeChecked);\n      // console.log(checkedItemsTagList.length);\n      // console.log(checkedItemsTagList);\n\n    }\n\n    return checkedItemsTagList;\n  } //if u click cancel on the selected tags the checkboxes should be unchecked auto\n\n\n  //checking the empdetails matches\n  //experience match employee's\n  CheckExperience(employeeExperience, expMinReq, expMaxReq) {\n    //experience checking: whether the emp has meet the req experience of customer\n    if (parseInt(employeeExperience) >= expMinReq && parseInt(employeeExperience) <= expMaxReq) {\n      return true;\n    }\n\n    return false;\n  } //name checking: whether the emp has matched the name\n\n\n  checkNameId(empName, empId, NameIdReq) {\n    if (NameIdReq) {\n      if (empName.toLowerCase().includes(NameIdReq.toLowerCase()) || empId.includes(NameIdReq)) {\n        return true; //   console.log(\"nameMatch\"+x.name+\" \"+nameReq);\n      } else {\n        return false;\n      }\n    } else {\n      return true; //if customer not typed anything\n    }\n  } //checking skills match\n\n\n  checkSkillsMatch(skillsChecked, empPrimarySkills, empSecondarySkills) {\n    if (skillsChecked.size > 0) {\n      //atleast one skill is checked\n      const iterator1 = skillsChecked.keys();\n      const iterator2 = skillsChecked.values();\n\n      for (let i = 0; i < skillsChecked.size; i++) {\n        //checking all the checked skills the emp has or not\n        let selectedSkill = iterator2.next().value;\n        let skillName = iterator1.next().value;\n\n        if (selectedSkill) {\n          let empPrimarySkillsArray = empPrimarySkills.toLowerCase().split(\",,\");\n          let empSecondarySkillsArray = empSecondarySkills.toLowerCase().split(\",,\");\n\n          if (!(empPrimarySkillsArray.includes(skillName) || empSecondarySkillsArray.includes(skillName))) {\n            return false; //if one is not in the profile then return false\n          }\n        }\n      }\n\n      return true;\n    } else {\n      return true;\n    }\n  } //managers Match checking\n\n\n  checkManagerMatch(ManagersChecked, EmpManager) {\n    let managerMatch = false;\n\n    if (ManagersChecked.size > 0) {\n      const iterator1 = ManagersChecked.keys();\n      const iterator2 = ManagersChecked.values();\n      let oneManagerAtleastChecked = false;\n\n      for (let i = 0; i < ManagersChecked.size; i++) {\n        let selectedManger = iterator2.next().value;\n        let selectedMangerName = iterator1.next().value;\n\n        if (selectedManger && !managerMatch) {\n          //check whether the checkbox is still selected and manager is matched in previous loop\n          oneManagerAtleastChecked = true;\n\n          if (EmpManager.toLowerCase().includes(selectedMangerName)) {\n            managerMatch = true; // console.log(\"true inside loop\");\n          } else {\n            managerMatch = false;\n          }\n        } else if (!oneManagerAtleastChecked && i === ManagersChecked.size - 1) {\n          //if all the previous checked managers are unchecked\n          managerMatch = true;\n        }\n      }\n\n      if (managerMatch) return true;else return false;\n    } else {\n      return true;\n    }\n  } //check pods Match\n\n\n  checkPodsMatch(podsChecked, empPod) {\n    let podsMatch = false;\n\n    if (podsChecked.size > 0) {\n      const iterator1 = podsChecked.keys();\n      const iterator2 = podsChecked.values();\n      let onePodAtleastChecked = false;\n\n      for (let i = 0; i < podsChecked.size; i++) {\n        let selectedPod = iterator2.next().value;\n        let selectedPodName = iterator1.next().value;\n\n        if (selectedPod && !podsMatch) {\n          //check whether the checkbox is still selected and pod is matched in previous loop\n          onePodAtleastChecked = true;\n\n          if (empPod.toLowerCase().includes(selectedPodName)) {\n            podsMatch = true; // console.log(\"true inside loop\");\n          } else {\n            podsMatch = false;\n          }\n        } else if (!onePodAtleastChecked && i === podsChecked.size - 1) {\n          //if all the previous checked pods are unchecked\n          podsMatch = true;\n        }\n      }\n\n      if (podsMatch) {\n        return true;\n      } else {\n        return false;\n      }\n    } else {\n      return true;\n    }\n  } //projects match\n\n\n  checkProjectMatch(projectsChecked, empProject) {\n    let projectsMatch = false;\n\n    if (projectsChecked.size > 0) {\n      const iterator1 = projectsChecked.keys();\n      const iterator2 = projectsChecked.values();\n      let oneProjectAtleastChecked = false;\n\n      for (let i = 0; i < projectsChecked.size; i++) {\n        let selectedProject = iterator2.next().value;\n        let selectedProjectName = iterator1.next().value;\n\n        if (selectedProject && !projectsMatch) {\n          //check whether the checkbox is still selected and project is matched in previous loop\n          oneProjectAtleastChecked = true;\n\n          if (empProject.toLowerCase().includes(selectedProjectName)) {\n            projectsMatch = true; // console.log(\"true inside loop\");\n          } else {\n            projectsMatch = false;\n          }\n        } else if (!oneProjectAtleastChecked && i === projectsChecked.size - 1) {\n          //if all the previous checked projects are unchecked\n          projectsMatch = true;\n        }\n      }\n\n      if (projectsMatch) {\n        return true;\n      } else {\n        return false;\n      }\n    } else {\n      return true;\n    }\n  } //Hobbies match\n  // checkHobbiesMatch(hobbiesChecked,empHobbies){\n  //   if (hobbiesChecked.size > 0) {  //atleast one hobby is checked\n  //     const iterator1 = hobbiesChecked.keys();\n  //     const iterator2 = hobbiesChecked.values();\n  //     for (let i = 0; i < hobbiesChecked.size; i++) {  //checking all the checked hobby the emp has or not\n  //       let selectedHobby = iterator2.next().value;\n  //       let hobbyName = iterator1.next().value;\n  //       if (selectedHobby) {\n  //         if ( !(((empHobbies.toLowerCase()).includes(hobbyName))) ) {\n  //           return false;  //if one is not in the profile then return false\n  //         }\n  //       }\n  //     }\n  //     return true;\n  //   } else {\n  //     return true;\n  //   }\n  // }\n  //checking emp status match\n\n\n  checkEmpStatusMatch(EmployeeStatusChecked, EmpStatus) {\n    let ESMatch = false;\n\n    if (EmployeeStatusChecked.size > 0) {\n      const iterator1 = EmployeeStatusChecked.keys();\n      const iterator2 = EmployeeStatusChecked.values();\n      let oneESAtleastChecked = false;\n\n      for (let i = 0; i < EmployeeStatusChecked.size; i++) {\n        let selectedES = iterator2.next().value; //true or false\n\n        let selectedESName = iterator1.next().value;\n\n        if (selectedES && !ESMatch) {\n          //check whether the checkbox is still selected and pod is matched in previous loop\n          oneESAtleastChecked = true;\n\n          if (EmpStatus.toLowerCase().includes(\"left\")) {\n            EmpStatus = \"Alumni\";\n          }\n\n          if (EmpStatus.toLowerCase().includes(selectedESName)) {\n            ESMatch = true; // console.log(\"true inside loop\");\n          } else {\n            ESMatch = false;\n          }\n        } else if (!oneESAtleastChecked && i === EmployeeStatusChecked.size - 1) {\n          //if all the previous checked pods are unchecked\n          ESMatch = true;\n        }\n      }\n\n      if (ESMatch) {\n        return true;\n      } else {\n        return false;\n      }\n    } else {\n      return true;\n    }\n  } // checking Engagement Type match\n\n\n  checkEngagementTypeMatch(EngagementTypeChecked, EngagementType) {\n    let ETMatch = false;\n\n    if (EngagementTypeChecked.size > 0) {\n      const iterator1 = EngagementTypeChecked.keys();\n      const iterator2 = EngagementTypeChecked.values();\n      let oneETAtleastChecked = false;\n\n      for (let i = 0; i < EngagementTypeChecked.size; i++) {\n        let selectedET = iterator2.next().value; //true or false\n\n        let selectedETName = iterator1.next().value;\n\n        if (selectedET && !ETMatch) {\n          //check whether the checkbox is still selected and pod is matched in previous loop\n          oneETAtleastChecked = true;\n\n          if (EngagementType.includes(\"T&amp;M\")) {\n            EngagementType = \"t&m\";\n          } // console.log(EngagementType);\n          // console.log(selectedETName);\n\n\n          if (EngagementType.toLowerCase().includes(selectedETName)) {\n            ETMatch = true; //  console.log(\"true inside loop\");\n          } else {\n            ETMatch = false;\n          }\n        } else if (!oneETAtleastChecked && i === EngagementTypeChecked.size - 1) {\n          //if all the previous checked pods are unchecked\n          ETMatch = true;\n        }\n      }\n\n      if (ETMatch) {\n        return true;\n      } else {\n        return false;\n      }\n    } else {\n      return true;\n    }\n  } //checking billability match\n\n\n  checkBillableMatch(billableChecked, billable) {\n    let billableMatch = false;\n\n    if (billableChecked.size > 0) {\n      const iterator1 = billableChecked.keys();\n      const iterator2 = billableChecked.values();\n      let oneBillableAtleastChecked = false;\n\n      for (let i = 0; i < billableChecked.size; i++) {\n        let selectedBillable = iterator2.next().value; //true or false\n\n        let selectedBillableName = iterator1.next().value;\n\n        if (selectedBillable && !billableMatch) {\n          //check whether the checkbox is still selected and pod is matched in previous loop\n          oneBillableAtleastChecked = true;\n\n          if (billable.toLowerCase().includes(selectedBillableName)) {\n            billableMatch = true; //  console.log(\"true inside loop\");\n          } else {\n            billableMatch = false;\n          }\n        } else if (!oneBillableAtleastChecked && i === billableChecked.size - 1) {\n          //if all the previous checked pods are unchecked\n          billableMatch = true;\n        }\n      }\n\n      if (billableMatch) {\n        return true;\n      } else {\n        return false;\n      }\n    } else {\n      return true;\n    }\n  }\n\n  filteringTheEmp() {\n    let Employees = this.state.Employees;\n    let expMinReq = this.state.ExperienceMinMax[0];\n    let expMaxReq = this.state.ExperienceMinMax[1];\n    let nameReq = this.state.name;\n    let skillsChecked = this.state.checkedItemsSkills;\n    let ManagersChecked = this.state.checkedItemsManager;\n    let podsChecked = this.state.checkedItemsPod;\n    let projectsChecked = this.state.checkedItemsProjects; // let HobbbiesChecked = this.state.checkedItemsHobbies;\n\n    let EmpStatusChecked = this.state.checkedItemsEmpStatus;\n    let EngagementTypeChecked = this.state.checkedItemsEngagementType;\n    let billableChecked = this.state.checkedItemsBillable;\n    let filteredEmployee = [];\n    Employees.map(x => /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: (() => {\n        if (this.CheckExperience(x.Experience, expMinReq, expMaxReq) && this.checkNameId(x.name, x.Emp_id, nameReq) && this.checkPodsMatch(podsChecked, x.Pod) && this.checkProjectMatch(projectsChecked, x.current_working_project) && this.checkSkillsMatch(skillsChecked, x.primary_skills, x.secndary_skills) && this.checkManagerMatch(ManagersChecked, x.Manager) // && this.checkHobbiesMatch(HobbbiesChecked, x.hobbies)\n        && this.checkEmpStatusMatch(EmpStatusChecked, x.employment_status) && this.checkEngagementTypeMatch(EngagementTypeChecked, x.engagement_model) && this.checkBillableMatch(billableChecked, x.billable)) {\n          filteredEmployee.push(x);\n        }\n      })()\n    }, void 0, false));\n    return filteredEmployee;\n  }\n\n  FiltersHover() {\n    var x = document.getElementById(\"filtersContainer\");\n    var y = document.getElementById(\"filterPage\");\n    var z = document.getElementById(\"filter-icon\"); // console.log(x.className);\n\n    if (x.className === \"reqForm\") {\n      x.className = \"filtersContainer\";\n      y.className = \"filter-containerMobile\";\n      z.style.display = 'none';\n    } else {\n      x.className = \"reqForm\";\n      y.className = \"filter-container\";\n      z.style.display = 'block';\n    }\n  }\n\n  render() {\n    //initialisig the state variables for manipulations\n    let skillsFilterShowCust = this.state.skillsFilterShow;\n    let podsFilterShowCust = this.state.podsFilterShow;\n    let managersFilterShowCust = this.state.managersFilterShow;\n    let projectsFilterShowCust = this.state.projectsFilterShow;\n    let HobbiesFilterShowCust = this.state.HobbiesFilterShow;\n    let filteredEmployee = this.filteringTheEmp();\n    let checkedItemsTagList = this.AllCheckedItems(); //getting all the checked items and storing to make tags\n    // console.log(filteredEmployee);\n\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"filter-container\",\n        id: \"filterPage\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"filter-icon\",\n          onClick: () => this.FiltersHover(),\n          children: /*#__PURE__*/_jsxDEV(BsFillFunnelFill, {\n            id: \"filter-icon\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 723,\n            columnNumber: 9\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 722,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Scrollbars, {\n          style: {\n            height: \"100%\"\n          },\n          onScroll: this.handleScroll,\n          autoHide: true // Hide delay in ms\n          ,\n          autoHideTimeout: 1000 // Duration for hide animation in ms.\n          ,\n          autoHideDuration: 200,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"reqForm\",\n            id: \"filtersContainer\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"filter-icon\",\n              id: \"clear-icon\",\n              onClick: () => this.FiltersHover(),\n              children: /*#__PURE__*/_jsxDEV(ClearIcon, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 734,\n                columnNumber: 13\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 733,\n              columnNumber: 9\n            }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"filtered-emp-count\",\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"filterName\",\n                  children: \"Employees: \"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 738,\n                  columnNumber: 17\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  className: \"empCount\",\n                  children: filteredEmployee.length\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 740,\n                  columnNumber: 17\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 737,\n                columnNumber: 11\n              }, this), /*#__PURE__*/_jsxDEV(TextField, {\n                id: \"outlined-basic\",\n                label: \"Enter name or Id\",\n                variant: \"outlined\" // size=\"small\"\n                ,\n                style: {\n                  padding: \"10.5px 8px\",\n                  paddingLeft: 0,\n                  paddingBottom: 0,\n                  width: \"100%\"\n                },\n                type: \"text\",\n                name: \"name\",\n                onChange: this.myChangeHandler,\n                className: \"InpcheckedItemsSkillsuttextField\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 743,\n                columnNumber: 15\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"Experience-overview\",\n                children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                  className: \"filterName\",\n                  children: \"Experience: \"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 757,\n                  columnNumber: 15\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"exp-display\",\n                  children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                    children: [\" \", this.state.ExperienceMinMax[0], \" - \"]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 759,\n                    columnNumber: 15\n                  }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                    children: [\"  \", this.state.ExperienceMinMax[1], \" years\"]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 760,\n                    columnNumber: 15\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 758,\n                  columnNumber: 15\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 756,\n                columnNumber: 13\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"experienceSlider\",\n                children: /*#__PURE__*/_jsxDEV(Slider, {\n                  defaultValue: [0, 25],\n                  value: this.ExperienceMinMax,\n                  onChange: this.handleChange,\n                  valueLabelDisplay: \"auto\",\n                  \"aria-labelledby\": \"range-slider\",\n                  getAriaValueText: this.valueText,\n                  step: 1,\n                  min: 0,\n                  max: 45,\n                  style: {\n                    color: \"#ff8c4b\"\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 766,\n                  columnNumber: 15\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 763,\n                columnNumber: 13\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"filterName\",\n                style: {\n                  paddingTop: 2\n                },\n                children: \"Skills :\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 781,\n                columnNumber: 13\n              }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n                children: /*#__PURE__*/_jsxDEV(\"table\", {\n                  className: \"CheckboxesTable\",\n                  children: [this.state.skillsApi.slice(0, skillsFilterShowCust).map(item => /*#__PURE__*/_jsxDEV(\"tbody\", {\n                    children: /*#__PURE__*/_jsxDEV(\"tr\", {\n                      children: /*#__PURE__*/_jsxDEV(\"td\", {\n                        children: /*#__PURE__*/_jsxDEV(\"label\", {\n                          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                            type: \"checkbox\",\n                            name: \"checkedItemsSkills\",\n                            value: item.name.toLowerCase(),\n                            onChange: this.CheckBoxhandleChange,\n                            id: item.name.toLowerCase()\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 789,\n                            columnNumber: 27\n                          }, this), \" \", item.name, \" (\", item.count, \")\"]\n                        }, void 0, true, {\n                          fileName: _jsxFileName,\n                          lineNumber: 788,\n                          columnNumber: 25\n                        }, this)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 787,\n                        columnNumber: 23\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 786,\n                      columnNumber: 28\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 786,\n                    columnNumber: 21\n                  }, this)), /*#__PURE__*/_jsxDEV(\"tbody\", {\n                    className: \"showMore\",\n                    onClick: this.showMoreSkills,\n                    children: this.state.skillsExpanded ? /*#__PURE__*/_jsxDEV(\"tr\", {\n                      children: /*#__PURE__*/_jsxDEV(\"td\", {\n                        children: \"show less\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 804,\n                        columnNumber: 25\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 804,\n                      columnNumber: 21\n                    }, this) : /*#__PURE__*/_jsxDEV(\"tr\", {\n                      children: /*#__PURE__*/_jsxDEV(\"td\", {\n                        children: \"show more\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 806,\n                        columnNumber: 25\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 806,\n                      columnNumber: 21\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 801,\n                    columnNumber: 17\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 783,\n                  columnNumber: 15\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 782,\n                columnNumber: 13\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"filterName\",\n                style: {\n                  paddingTop: 2\n                },\n                children: \"Managers :\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 813,\n                columnNumber: 13\n              }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n                children: /*#__PURE__*/_jsxDEV(\"table\", {\n                  className: \"CheckboxesTable\",\n                  children: [this.state.MangersApi.slice(0, managersFilterShowCust).map(item => /*#__PURE__*/_jsxDEV(\"tbody\", {\n                    children: /*#__PURE__*/_jsxDEV(\"tr\", {\n                      children: /*#__PURE__*/_jsxDEV(\"td\", {\n                        children: /*#__PURE__*/_jsxDEV(\"label\", {\n                          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                            name: \"checkedItemsManager\",\n                            type: \"checkbox\",\n                            value: item.name.toLowerCase(),\n                            onChange: this.CheckBoxhandleChange,\n                            id: item.name.toLowerCase(),\n                            className: \"checkboxes\"\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 821,\n                            columnNumber: 27\n                          }, this), \" \", item.name, \" (\", item.count, \")\"]\n                        }, void 0, true, {\n                          fileName: _jsxFileName,\n                          lineNumber: 820,\n                          columnNumber: 25\n                        }, this)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 819,\n                        columnNumber: 23\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 818,\n                      columnNumber: 28\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 818,\n                    columnNumber: 21\n                  }, this)), this.state.MangersApi.length > 10 ? /*#__PURE__*/_jsxDEV(\"tbody\", {\n                    className: \"showMore\",\n                    onClick: this.showMoreManagers,\n                    children: this.state.managersExpanded ? /*#__PURE__*/_jsxDEV(\"tr\", {\n                      children: /*#__PURE__*/_jsxDEV(\"td\", {\n                        children: \"show less\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 838,\n                        columnNumber: 27\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 838,\n                      columnNumber: 23\n                    }, this) : /*#__PURE__*/_jsxDEV(\"tr\", {\n                      children: /*#__PURE__*/_jsxDEV(\"td\", {\n                        children: \"show more\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 840,\n                        columnNumber: 27\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 840,\n                      columnNumber: 23\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 835,\n                    columnNumber: 19\n                  }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 815,\n                  columnNumber: 15\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 814,\n                columnNumber: 13\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"filterName\",\n                children: \"Pods :\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 848,\n                columnNumber: 13\n              }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n                children: /*#__PURE__*/_jsxDEV(\"table\", {\n                  className: \"CheckboxesTable\",\n                  children: [this.state.PodsApi.slice(0, podsFilterShowCust).map(item => /*#__PURE__*/_jsxDEV(\"tbody\", {\n                    children: [\" \", /*#__PURE__*/_jsxDEV(\"tr\", {\n                      children: /*#__PURE__*/_jsxDEV(\"td\", {\n                        children: /*#__PURE__*/_jsxDEV(\"label\", {\n                          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                            name: \"checkedItemsPod\",\n                            type: \"checkbox\",\n                            value: item.name.toLowerCase(),\n                            onChange: this.CheckBoxhandleChange,\n                            id: item.name.toLowerCase()\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 856,\n                            columnNumber: 27\n                          }, this), \" \", item.name, \" (\", item.count, \")\"]\n                        }, void 0, true, {\n                          fileName: _jsxFileName,\n                          lineNumber: 855,\n                          columnNumber: 25\n                        }, this)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 854,\n                        columnNumber: 23\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 853,\n                      columnNumber: 28\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 853,\n                    columnNumber: 20\n                  }, this)), this.state.PodsApi.length > 10 ? /*#__PURE__*/_jsxDEV(\"tbody\", {\n                    className: \"showMore\",\n                    onClick: this.showMorePods,\n                    children: this.state.podsExpanded ? /*#__PURE__*/_jsxDEV(\"tr\", {\n                      children: /*#__PURE__*/_jsxDEV(\"td\", {\n                        children: \"show less\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 872,\n                        columnNumber: 29\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 872,\n                      columnNumber: 25\n                    }, this) : /*#__PURE__*/_jsxDEV(\"tr\", {\n                      children: /*#__PURE__*/_jsxDEV(\"td\", {\n                        children: \"show more\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 874,\n                        columnNumber: 29\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 874,\n                      columnNumber: 25\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 869,\n                    columnNumber: 21\n                  }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 850,\n                  columnNumber: 15\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 849,\n                columnNumber: 13\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"filterName\",\n                children: \"projects :\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 883,\n                columnNumber: 13\n              }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n                children: /*#__PURE__*/_jsxDEV(\"table\", {\n                  className: \"CheckboxesTable\",\n                  children: [this.state.projectsApi.slice(0, projectsFilterShowCust).map(item => /*#__PURE__*/_jsxDEV(\"tbody\", {\n                    children: /*#__PURE__*/_jsxDEV(\"tr\", {\n                      children: /*#__PURE__*/_jsxDEV(\"td\", {\n                        children: /*#__PURE__*/_jsxDEV(\"label\", {\n                          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                            name: \"checkedItemsProjects\",\n                            type: \"checkbox\",\n                            value: item.name.toLowerCase(),\n                            onChange: this.CheckBoxhandleChange,\n                            id: item.name.toLowerCase()\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 891,\n                            columnNumber: 27\n                          }, this), \" \", item.name.replace(\"&amp;\", \"&\"), \" (\", item.count, \")\"]\n                        }, void 0, true, {\n                          fileName: _jsxFileName,\n                          lineNumber: 890,\n                          columnNumber: 25\n                        }, this)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 889,\n                        columnNumber: 23\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 888,\n                      columnNumber: 28\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 888,\n                    columnNumber: 21\n                  }, this)), this.state.projectsApi.length > 10 ? /*#__PURE__*/_jsxDEV(\"tbody\", {\n                    className: \"showMore\",\n                    onClick: this.showMoreProjects,\n                    children: this.state.projectsExpanded ? /*#__PURE__*/_jsxDEV(\"tr\", {\n                      children: /*#__PURE__*/_jsxDEV(\"td\", {\n                        children: \"show less\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 907,\n                        columnNumber: 27\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 907,\n                      columnNumber: 23\n                    }, this) : /*#__PURE__*/_jsxDEV(\"tr\", {\n                      children: /*#__PURE__*/_jsxDEV(\"td\", {\n                        children: \"show more\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 909,\n                        columnNumber: 27\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 909,\n                      columnNumber: 23\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 904,\n                    columnNumber: 19\n                  }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 885,\n                  columnNumber: 15\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 884,\n                columnNumber: 13\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"filterName\",\n                children: \"Employee Status :\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 954,\n                columnNumber: 13\n              }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n                children: /*#__PURE__*/_jsxDEV(\"table\", {\n                  className: \"CheckboxesTable\",\n                  children: this.state.employeeStatusApi.slice(0, HobbiesFilterShowCust).map(item => /*#__PURE__*/_jsxDEV(\"tbody\", {\n                    children: [\" \", /*#__PURE__*/_jsxDEV(\"tr\", {\n                      children: /*#__PURE__*/_jsxDEV(\"td\", {\n                        children: /*#__PURE__*/_jsxDEV(\"label\", {\n                          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                            name: \"checkedItemsEmpStatus\",\n                            type: \"checkbox\",\n                            value: item.name.toLowerCase(),\n                            onChange: this.CheckBoxhandleChange,\n                            id: item.name.toLowerCase()\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 962,\n                            columnNumber: 27\n                          }, this), \" \", item.name]\n                        }, void 0, true, {\n                          fileName: _jsxFileName,\n                          lineNumber: 961,\n                          columnNumber: 25\n                        }, this)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 960,\n                        columnNumber: 23\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 959,\n                      columnNumber: 28\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 959,\n                    columnNumber: 20\n                  }, this))\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 956,\n                  columnNumber: 15\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 955,\n                columnNumber: 13\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"filterName\",\n                children: \"Engagement Model :\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 980,\n                columnNumber: 14\n              }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n                children: /*#__PURE__*/_jsxDEV(\"table\", {\n                  className: \"CheckboxesTable\",\n                  children: this.state.engagementTypeApi.map(item => /*#__PURE__*/_jsxDEV(\"tbody\", {\n                    children: [\" \", /*#__PURE__*/_jsxDEV(\"tr\", {\n                      children: /*#__PURE__*/_jsxDEV(\"td\", {\n                        children: /*#__PURE__*/_jsxDEV(\"label\", {\n                          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                            name: \"checkedItemsEngagementType\",\n                            type: \"checkbox\",\n                            value: item.name.toLowerCase(),\n                            onChange: this.CheckBoxhandleChange,\n                            id: item.name.toLowerCase()\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 988,\n                            columnNumber: 27\n                          }, this), \" \", item.name]\n                        }, void 0, true, {\n                          fileName: _jsxFileName,\n                          lineNumber: 987,\n                          columnNumber: 25\n                        }, this)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 986,\n                        columnNumber: 23\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 985,\n                      columnNumber: 28\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 985,\n                    columnNumber: 20\n                  }, this))\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 982,\n                  columnNumber: 15\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 981,\n                columnNumber: 13\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"filterName\",\n                children: \"Billable :\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1005,\n                columnNumber: 14\n              }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n                children: /*#__PURE__*/_jsxDEV(\"table\", {\n                  className: \"CheckboxesTable\",\n                  children: this.state.billableApi.map(item => /*#__PURE__*/_jsxDEV(\"tbody\", {\n                    children: [\" \", /*#__PURE__*/_jsxDEV(\"tr\", {\n                      children: /*#__PURE__*/_jsxDEV(\"td\", {\n                        children: /*#__PURE__*/_jsxDEV(\"label\", {\n                          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                            name: \"checkedItemsBillable\",\n                            type: \"checkbox\",\n                            value: item.name.toLowerCase(),\n                            onChange: this.CheckBoxhandleChange,\n                            id: item.name.toLowerCase()\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 1013,\n                            columnNumber: 27\n                          }, this), \" \", item.name]\n                        }, void 0, true, {\n                          fileName: _jsxFileName,\n                          lineNumber: 1012,\n                          columnNumber: 25\n                        }, this)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1011,\n                        columnNumber: 23\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1010,\n                      columnNumber: 28\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1010,\n                    columnNumber: 20\n                  }, this))\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1007,\n                  columnNumber: 15\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1006,\n                columnNumber: 13\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 736,\n              columnNumber: 11\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 732,\n            columnNumber: 9\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 725,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Scrollbars, {\n          style: {\n            height: 600\n          },\n          onScroll: this.handleScroll,\n          autoHide: true // Hide delay in ms\n          ,\n          autoHideTimeout: 1000 // Duration for hide animation in ms.\n          ,\n          autoHideDuration: 200,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"Employees\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"selectedTags\",\n              children: checkedItemsTagList.map(x => /*#__PURE__*/_jsxDEV(_Fragment, {\n                children: (() => {\n                  return /*#__PURE__*/_jsxDEV(_Fragment, {\n                    children: /*#__PURE__*/_jsxDEV(Chip, {\n                      label: x.value // icon={icon}\n                      ,\n                      onDelete: this.handleDelete(x),\n                      className: \"tags\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1055,\n                      columnNumber: 31\n                    }, this)\n                  }, void 0, false);\n                })()\n              }, void 0, false))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1047,\n              columnNumber: 15\n            }, this), filteredEmployee.length > 0 ? /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false) : /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: (() => {\n                return (\n                  /*#__PURE__*/\n                  //no result found\n                  _jsxDEV(\"div\", {\n                    className: \"NoResult\",\n                    children: /*#__PURE__*/_jsxDEV(\"img\", {\n                      alt: \"No result found\",\n                      src: NoResult\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1082,\n                      columnNumber: 27\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1081,\n                    columnNumber: 25\n                  }, this)\n                );\n              })()\n            }, void 0, false), filteredEmployee.slice(this.state.currentPage * this.state.maxItemsPerPage - this.state.maxItemsPerPage, this.state.currentPage * this.state.maxItemsPerPage).map(employee => /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: (() => {\n                return /*#__PURE__*/_jsxDEV(EmployeeCard, {\n                  employee: employee\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1097,\n                  columnNumber: 27\n                }, this);\n              })()\n            }, void 0, false))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1042,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1035,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 720,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"nextBack\",\n        children: [this.state.currentPage > 1 ? /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"nextBackBttn\",\n          onClick: () => this.changePage('back'),\n          children: \"\\xAB \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1112,\n          columnNumber: 13\n        }, this) : null, /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"nextBackBttn\",\n          children: this.state.currentPage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1113,\n          columnNumber: 21\n        }, this), filteredEmployee.length > this.state.currentPage * this.state.maxItemsPerPage ? /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"nextBackBttn\",\n          onClick: () => this.changePage('next'),\n          children: \" \\xBB\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1115,\n          columnNumber: 13\n        }, this) : null]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1110,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true);\n  }\n\n}","map":{"version":3,"sources":["/home/raguram_s/lister-emp-portal/src/components/FilterPage.js"],"names":["React","Component","config","Slider","NoResult","Chip","TextField","EmployeeCard","Scrollbars","ClearIcon","BsFillFunnelFill","EmployeeView","constructor","props","valueText","value","handleChange","e","newValue","setState","ExperienceMinMax","myChangeHandler","event","nam","target","name","val","handleDelete","chipToDelete","filterField","isChecked","item","prevState","checkedItemsSkills","set","document","getElementById","checked","checkedItemsManager","checkedItemsPod","checkedItemsProjects","checkedItemsHobbies","checkedItemsEmpStatus","checkedItemsEngagementType","checkedItemsBillable","state","Employees","skillsApi","MangersApi","PodsApi","projectsApi","hobbiesApi","employeeStatusApi","billableApi","engagementTypeApi","skills","skillsFilterShow","projectsFilterShow","managersFilterShow","podsFilterShow","HobbiesFilterShow","skillsExpanded","projectsExpanded","managersExpanded","podsExpanded","hobbiesExpanded","Map","filteredEmployee","currentPage","maxItemsPerPage","checkedItemsTag","skillsCheckBox","CheckBoxhandleChange","bind","showMoreSkills","showMoreProjects","showMoreManagers","showMorePods","showMoreHobbies","componentDidMount","Promise","all","fetch","drupal_url","then","res","json","urlOneData","urlTwoData","urlThreeData","urlFourData","urlFiveData","urlSixData","urlSevenData","urlEightData","urlNineData","length","changePage","direction","AllCheckedItems","skillsChecked","ManagersChecked","podsChecked","projectsChecked","HobbiesChecked","EmpStatuschecked","EngagementTypeChecked","billableChecked","checkedItemsTagList","size","iteratorS1","keys","iteratorS2","values","i","ps","next","tagsCheckedObj","push","iteratorM1","iteratorM2","iteratorP1","iteratorP2","iteratorPr1","iteratorPr2","iteratorH1","iteratorH2","iteratorES1","iteratorES2","iteratorET1","iteratorET2","iteratorB1","iteratorB2","CheckExperience","employeeExperience","expMinReq","expMaxReq","parseInt","checkNameId","empName","empId","NameIdReq","toLowerCase","includes","checkSkillsMatch","empPrimarySkills","empSecondarySkills","iterator1","iterator2","selectedSkill","skillName","empPrimarySkillsArray","split","empSecondarySkillsArray","checkManagerMatch","EmpManager","managerMatch","oneManagerAtleastChecked","selectedManger","selectedMangerName","checkPodsMatch","empPod","podsMatch","onePodAtleastChecked","selectedPod","selectedPodName","checkProjectMatch","empProject","projectsMatch","oneProjectAtleastChecked","selectedProject","selectedProjectName","checkEmpStatusMatch","EmployeeStatusChecked","EmpStatus","ESMatch","oneESAtleastChecked","selectedES","selectedESName","checkEngagementTypeMatch","EngagementType","ETMatch","oneETAtleastChecked","selectedET","selectedETName","checkBillableMatch","billable","billableMatch","oneBillableAtleastChecked","selectedBillable","selectedBillableName","filteringTheEmp","nameReq","EmpStatusChecked","map","x","Experience","Emp_id","Pod","current_working_project","primary_skills","secndary_skills","Manager","employment_status","engagement_model","FiltersHover","y","z","className","style","display","render","skillsFilterShowCust","podsFilterShowCust","managersFilterShowCust","projectsFilterShowCust","HobbiesFilterShowCust","height","handleScroll","padding","paddingLeft","paddingBottom","width","color","paddingTop","slice","count","replace","employee"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport '../components/styles/style.css';\nimport config from '../config';\n// import Typography from '@material-ui/core/Typography';\nimport Slider from '@material-ui/core/Slider';\nimport NoResult from '../assets/noResult.gif'\nimport Chip from '@material-ui/core/Chip';\n// import empGroup from '../assets/group-orange.png'\nimport {  TextField } from \"@material-ui/core\";\n// import { event } from 'jquery';\nimport { EmployeeCard } from './EmployeeCard';\nimport { Scrollbars } from 'react-custom-scrollbars';\nimport ClearIcon from '@material-ui/icons/Clear';\nimport { BsFillFunnelFill } from \"react-icons/bs\";\n\n\n/*\n  state variables and api data: 20-68 lines\n  onchange functions\n  filtering employees based on filter logic\n  req Data initializations\n  filters (Dynamic checkboxes,slider,input) html\n  displaying tags,emp cards,next/back button\n*/\n\n\nexport default class EmployeeView extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      Employees: [],//api data\n      skillsApi: [],\n      MangersApi: [],\n      PodsApi: [],\n      projectsApi: [],\n      hobbiesApi: [],\n      employeeStatusApi: [],\n      billableApi: [],\n      engagementTypeApi: [],\n      skills: [],\n      name: '',\n      skillsFilterShow:10,   //number of skill filters to be shown\n      projectsFilterShow:10,   //number of projects filters to be shown\n      managersFilterShow:10,\n      podsFilterShow:10,\n      HobbiesFilterShow:10,\n      skillsExpanded: false,\n      projectsExpanded: false,\n      managersExpanded: false,\n      podsExpanded:false,\n      hobbiesExpanded:false,\n      checkedItemsSkills: new Map(),\n      checkedItemsManager: new Map(),\n      checkedItemsPod: new Map(),\n      checkedItemsProjects: new Map(),\n      checkedItemsHobbies: new Map(),\n      checkedItemsEmpStatus: new Map(),\n      checkedItemsEngagementType: new Map(),\n      checkedItemsBillable: new Map(),\n      ExperienceMinMax: [0, 25],\n      filteredEmployee: [],\n      currentPage :1,\n      maxItemsPerPage:12,\n      checkedItemsTag : [],\n      skillsCheckBox: false\n    }\n\n    this.CheckBoxhandleChange = this.CheckBoxhandleChange.bind(this);\n    this.showMoreSkills = this.showMoreSkills.bind(this);\n    this.showMoreProjects = this.showMoreProjects.bind(this);\n    this.showMoreManagers = this.showMoreManagers.bind(this);\n    this.showMorePods = this.showMorePods.bind(this);\n    this.showMoreHobbies = this.showMoreHobbies.bind(this);\n  }\n  //fetching data from api\n  componentDidMount() {\n    Promise.all([\n      fetch(config.drupal_url + '/Employees').then(res => res.json()),\n      fetch(config.drupal_url + '/TaxonomyOrder/skills').then(res => res.json()),\n      fetch(config.drupal_url + '/TaxonomyOrder/manager').then(res => res.json()),\n      fetch(config.drupal_url + '/TaxonomyOrder/pod').then(res => res.json()),\n      fetch(config.drupal_url + '/TaxonomyOrder/projects').then(res => res.json()),\n      fetch(config.drupal_url + '/TaxonomyOrder/hobbies').then(res => res.json()),\n      fetch(config.drupal_url + '/Taxonomy/employee_status').then(res => res.json()),\n      fetch(config.drupal_url + '/Taxonomy/engagement_model').then(res => res.json()),\n      fetch(config.drupal_url + '/Taxonomy/billable').then(res => res.json())\n    ]).then(([urlOneData, urlTwoData, urlThreeData, urlFourData, urlFiveData, urlSixData, urlSevenData, urlEightData, urlNineData]) => {\n      this.setState({\n        Employees: urlOneData,\n        skillsApi: urlTwoData,\n        MangersApi: urlThreeData,\n        PodsApi: urlFourData,\n        projectsApi: urlFiveData,\n        hobbiesApi: urlSixData,\n        employeeStatusApi:urlSevenData,\n        engagementTypeApi: urlEightData,\n        billableApi: urlNineData\n      });\n    })\n  }\n\n  //Experience slider on change calls the fxn and changes the values\n  valueText = (value) => {\n    return `${value}`;\n  };\n  handleChange = (e, newValue) => {\n    // console.log(newValue);\n    this.setState({ ExperienceMinMax: newValue });\n  };\n\n  //all types of input text field changes will call the fxn and changes the value\n  myChangeHandler = (event) => {\n    let nam = event.target.name;\n    let val = event.target.value;\n    this.setState({ [nam]: val });\n  }\n\n\n  CheckBoxhandleChange(event) {   //skills,project,pod,manager checkeditems change (to check uncheck)\n    let nam = event.target.name;\n    var isChecked = event.target.checked;\n    var item = event.target.value;\n    // console.log(nam);\n    // console.log(isChecked);\n    if(nam === 'checkedItemsSkills'){\n      this.setState(prevState => ({ checkedItemsSkills: prevState.checkedItemsSkills.set(item, isChecked) }));\n      // document.getElementById(item).checked = true;\n    }\n    else if(nam === 'checkedItemsManager')\n      this.setState(prevState => ({ checkedItemsManager: prevState.checkedItemsManager.set(item, isChecked) }));\n    else if(nam === 'checkedItemsPod')\n      this.setState(prevState => ({ checkedItemsPod: prevState.checkedItemsPod.set(item, isChecked) }));\n    else if(nam === 'checkedItemsProjects')\n      this.setState(prevState => ({ checkedItemsProjects: prevState.checkedItemsProjects.set(item, isChecked) }));\n    else if(nam === 'checkedItemsHobbies')\n      this.setState(prevState => ({ checkedItemsHobbies: prevState.checkedItemsHobbies.set(item, isChecked) }));\n    else if(nam === 'checkedItemsEmpStatus')\n      this.setState(prevState => ({ checkedItemsEmpStatus: prevState.checkedItemsEmpStatus.set(item, isChecked) }));\n    else if (nam === 'checkedItemsEngagementType')\n      this.setState(prevState => ({ checkedItemsEngagementType: prevState.checkedItemsEngagementType.set(item, isChecked) }));\n    else if (nam === 'checkedItemsBillable')\n      this.setState(prevState => ({ checkedItemsBillable: prevState.checkedItemsBillable.set(item, isChecked) }));\n  }\n\n\n\n  //show more skill filter option\n  showMoreSkills(){\n    this.state.skillsFilterShow === 10 ? (\n      this.setState({ skillsFilterShow: this.state.skillsApi.length, skillsExpanded: true })\n    ) : (\n      this.setState({ skillsFilterShow: 10, skillsExpanded: false })\n    )\n  }\n\n  //show more filter filter option\n  showMoreProjects(){\n    this.state.projectsFilterShow === 10 ? (\n      this.setState({ projectsFilterShow: this.state.projectsApi.length, projectsExpanded: true })\n    ) : (\n      this.setState({ projectsFilterShow: 10, projectsExpanded: false })\n    )\n  }\n\n   //show more filter filter option this.state.managersExpanded\n   showMoreManagers(){\n    this.state.managersFilterShow === 10 ? (\n      this.setState({ managersFilterShow: this.state.MangersApi.length, managersExpanded: true })\n    ) : (\n      this.setState({ managersFilterShow: 10, managersExpanded: false })\n    )\n  }\n\n  //show more filter filter option this.state.managersExpanded\n  showMorePods() {\n    this.state.podsFilterShow === 10 ? (\n      this.setState({ podsFilterShow: this.state.PodsApi.length, podsExpanded: true })\n    ) : (\n      this.setState({ podsFilterShow: 10, podsExpanded: false })\n    )\n  }\n\n  showMoreHobbies(){\n    this.state.HobbiesFilterShow === 10 ? (\n      this.setState({ HobbiesFilterShow: this.state.hobbiesApi.length, hobbiesExpanded: true })\n    ) : (\n      this.setState({ HobbiesFilterShow: 10, hobbiesExpanded: false })\n    )\n\n  }\n\n  //next or back to view other emp cards if exists\n  changePage(direction) {\n    // console.log(direction);\n    if (direction === 'back') {\n     this.setState({\n      currentPage: this.state.currentPage - 1\n     });\n    } else if (direction === 'next') {\n     this.setState({\n      currentPage: this.state.currentPage + 1\n     });\n    }\n  }\n\n  AllCheckedItems(){\n    let skillsChecked = this.state.checkedItemsSkills;\n    let ManagersChecked = this.state.checkedItemsManager;\n    let podsChecked = this.state.checkedItemsPod;\n    let projectsChecked = this.state.checkedItemsProjects;\n    let HobbiesChecked = this.state.checkedItemsHobbies;\n    let EmpStatuschecked = this.state.checkedItemsEmpStatus;\n    let EngagementTypeChecked = this.state.checkedItemsEngagementType;\n    let billableChecked = this.state.checkedItemsBillable;\n    let checkedItemsTagList=[];\n    //storing all the checked items in array to display as tags\n    if(skillsChecked.size >0 || ManagersChecked.size >0  ||  podsChecked.size >0  || projectsChecked.size>0 || HobbiesChecked.size>0 || EmpStatuschecked.size>0 || EngagementTypeChecked.size>0 || billableChecked.size>0 ){\n      const iteratorS1 = skillsChecked.keys();\n      const iteratorS2 = skillsChecked.values();\n     \n      for (let i = 0; i < skillsChecked.size ; i++) {\n        let ps = iteratorS1.next().value;\n        if (iteratorS2.next().value) {\n          const tagsCheckedObj = { value: ps, filterField: \"skill\" };\n          checkedItemsTagList.push(tagsCheckedObj);\n         \n        }\n      }\n\n      const iteratorM1 = ManagersChecked.keys();\n      const iteratorM2 = ManagersChecked.values();\n      for (let i = 0; i < ManagersChecked.size; i++) {\n        let ps = iteratorM1.next().value;\n        if (iteratorM2.next().value) {\n          let tagsCheckedObj = { value: ps, filterField: \"manager\" };\n          checkedItemsTagList.push(tagsCheckedObj);\n        }\n      }\n\n      const iteratorP1 = podsChecked.keys();\n      const iteratorP2 = podsChecked.values();\n      for (let i = 0; i < podsChecked.size; i++) {\n        let ps = iteratorP1.next().value;\n        if (iteratorP2.next().value) {\n          let tagsCheckedObj = { value: ps, filterField: \"pod\" };\n          checkedItemsTagList.push(tagsCheckedObj);\n        }\n      }\n\n      const iteratorPr1 = projectsChecked.keys();\n      const iteratorPr2 = projectsChecked.values();\n      for (let i = 0; i < projectsChecked.size; i++) {\n        let ps = iteratorPr1.next().value;\n        if (iteratorPr2.next().value) {\n          let tagsCheckedObj = { value: ps, filterField: \"project\" };\n          checkedItemsTagList.push(tagsCheckedObj);\n        }\n      }\n\n      const iteratorH1 = HobbiesChecked.keys();\n      const iteratorH2 = HobbiesChecked.values();\n      for (let i = 0; i < HobbiesChecked.size; i++) {\n        let ps = iteratorH1.next().value;\n        if (iteratorH2.next().value) {\n          let tagsCheckedObj = { value: ps, filterField: \"hobby\" };\n          checkedItemsTagList.push(tagsCheckedObj);\n        }\n      }\n\n      const iteratorES1 = EmpStatuschecked.keys();\n      const iteratorES2 = EmpStatuschecked.values();\n      for (let i = 0; i < EmpStatuschecked.size; i++) {\n        let ps = iteratorES1.next().value;\n        if (iteratorES2.next().value) {\n          let tagsCheckedObj = { value: ps, filterField: \"EmpStatus\" };\n          checkedItemsTagList.push(tagsCheckedObj);\n        }\n      }\n\n      const iteratorET1 = EngagementTypeChecked.keys();\n      const iteratorET2 = EngagementTypeChecked.values();\n      for (let i = 0; i < EngagementTypeChecked.size; i++) {\n        let ps = iteratorET1.next().value;\n        if (iteratorET2.next().value) {\n          let tagsCheckedObj = { value: ps, filterField: \"EngagementType\" };\n          checkedItemsTagList.push(tagsCheckedObj);\n        }\n      }\n\n      const iteratorB1 = billableChecked.keys();\n      const iteratorB2 = billableChecked.values();\n      for (let i = 0; i < billableChecked.size; i++) {\n        let ps = iteratorB1.next().value;\n        if (iteratorB2.next().value) {\n          let tagsCheckedObj = { value: ps, filterField: \"billable\" };\n          checkedItemsTagList.push(tagsCheckedObj);\n        }\n      }\n\n      // console.log(billableChecked);\n      // console.log(EngagementTypeChecked);\n      // console.log(checkedItemsTagList.length);\n      // console.log(checkedItemsTagList);\n  }\n  return checkedItemsTagList;\n\n  }\n\n  //if u click cancel on the selected tags the checkboxes should be unchecked auto\n  handleDelete = (chipToDelete) => () => {\n    // console.log(chipToDelete);\n\n    let nam = chipToDelete.filterField;\n    var isChecked = false;\n    var item = chipToDelete.value;;\n    // console.log(nam);\n    // console.log(isChecked);\n    if(nam === 'skill'){\n      this.setState(prevState => ({ checkedItemsSkills: prevState.checkedItemsSkills.set(item, isChecked) }));\n      document.getElementById(item).checked = false;\n      // console.log(event.target);\n    }\n    else if(nam === 'manager'){\n      this.setState(prevState => ({ checkedItemsManager: prevState.checkedItemsManager.set(item, isChecked) }));\n      document.getElementById(item).checked = false;\n    }\n    else if(nam === 'pod'){\n      this.setState(prevState => ({ checkedItemsPod: prevState.checkedItemsPod.set(item, isChecked) }));\n      document.getElementById(item).checked = false;\n    }\n    else if(nam === 'project'){\n      this.setState(prevState => ({ checkedItemsProjects: prevState.checkedItemsProjects.set(item, isChecked) }));\n      document.getElementById(item).checked = false;\n    }\n    else if(nam === 'hobby'){\n      this.setState(prevState => ({ checkedItemsHobbies: prevState.checkedItemsHobbies.set(item, isChecked) }));\n      document.getElementById(item).checked = false;\n    }\n    else if(nam === 'EmpStatus'){\n      this.setState(prevState => ({ checkedItemsEmpStatus: prevState.checkedItemsEmpStatus.set(item, isChecked) }));\n      document.getElementById(item).checked = false;\n    }\n    else if(nam === 'EngagementType'){\n      this.setState(prevState => ({ checkedItemsEngagementType: prevState.checkedItemsEngagementType.set(item, isChecked) }));\n      document.getElementById(item).checked = false;\n    }\n    else if(nam === 'billable'){\n      this.setState(prevState => ({ checkedItemsBillable: prevState.checkedItemsBillable.set(item, isChecked) }));\n      document.getElementById(item).checked = false;\n    }\n  };\n\n  //checking the empdetails matches\n  //experience match employee's\n  CheckExperience(employeeExperience,expMinReq, expMaxReq){\n     //experience checking: whether the emp has meet the req experience of customer\n    if ((((parseInt(employeeExperience)) >= expMinReq) && (parseInt(employeeExperience) <= expMaxReq))) {\n      return true;\n    }\n    return false;\n  }\n\n    //name checking: whether the emp has matched the name\n  checkNameId(empName,empId,NameIdReq){\n    if (NameIdReq) {\n      if (((empName.toLowerCase()).includes(NameIdReq.toLowerCase())) || empId.includes(NameIdReq)) {\n       return true;\n        //   console.log(\"nameMatch\"+x.name+\" \"+nameReq);\n      } else {\n        return false;\n      }\n    } else {\n      return true;     //if customer not typed anything\n    }\n\n  }\n\n  //checking skills match\n  checkSkillsMatch(skillsChecked,empPrimarySkills,empSecondarySkills){\n    if (skillsChecked.size > 0) {  //atleast one skill is checked\n      const iterator1 = skillsChecked.keys();\n      const iterator2 = skillsChecked.values();\n      for (let i = 0; i < skillsChecked.size; i++) {  //checking all the checked skills the emp has or not\n        let selectedSkill = iterator2.next().value;\n        let skillName = iterator1.next().value;\n        if (selectedSkill) {\n          let empPrimarySkillsArray = empPrimarySkills.toLowerCase().split(\",,\");\n          let empSecondarySkillsArray = empSecondarySkills.toLowerCase().split(\",,\");\n          if ( !(((empPrimarySkillsArray).includes(skillName)) || ((empSecondarySkillsArray).includes(skillName))) ) {\n            return false;  //if one is not in the profile then return false\n          }\n        }\n      }\n      return true;\n    } else {\n      return true;\n    }\n  }\n\n\n  //managers Match checking\n  checkManagerMatch(ManagersChecked,EmpManager){\n    let managerMatch = false;\n    if (ManagersChecked.size > 0) {\n      const iterator1 = ManagersChecked.keys();\n      const iterator2 = ManagersChecked.values();\n      let oneManagerAtleastChecked = false;\n      for (let i = 0; i < ManagersChecked.size; i++) {\n          let selectedManger = iterator2.next().value;\n           let selectedMangerName = iterator1.next().value;\n        if (selectedManger && !managerMatch) {  //check whether the checkbox is still selected and manager is matched in previous loop\n          oneManagerAtleastChecked = true;\n          if (((EmpManager.toLowerCase()).includes(selectedMangerName))) {\n            managerMatch = true;\n            // console.log(\"true inside loop\");\n          } else {\n            managerMatch = false;\n          }\n\n        } else if ((!oneManagerAtleastChecked) && (i === ManagersChecked.size - 1)) {  //if all the previous checked managers are unchecked\n          managerMatch = true;\n        }\n      }\n      if(managerMatch)\n        return true;\n      else\n        return false;\n    } else {\n      return true;\n    }\n  }\n\n  //check pods Match\n  checkPodsMatch(podsChecked,empPod){\n    let podsMatch = false;\n     if (podsChecked.size > 0) {\n      const iterator1 = podsChecked.keys();\n      const iterator2 = podsChecked.values();\n      let onePodAtleastChecked = false;\n      for (let i = 0; i < podsChecked.size; i++) {\n          let selectedPod = iterator2.next().value;\n        let selectedPodName = iterator1.next().value;\n\n        if (selectedPod && !podsMatch) { //check whether the checkbox is still selected and pod is matched in previous loop\n          onePodAtleastChecked = true;\n          if (((empPod.toLowerCase()).includes(selectedPodName))) {\n\n            podsMatch = true;\n            // console.log(\"true inside loop\");\n          } else {\n            podsMatch = false;\n          }\n\n        } else if ((!onePodAtleastChecked) && (i === podsChecked.size - 1)) { //if all the previous checked pods are unchecked\n          podsMatch = true;\n        }\n      }\n       if (podsMatch){\n        return true;\n       }  \n       else{\n        return false;\n       }  \n    } else {\n      return true;\n    }\n  }\n\n //projects match\n  checkProjectMatch(projectsChecked,empProject){\n    let projectsMatch = false;\n    if (projectsChecked.size > 0) {\n      const iterator1 = projectsChecked.keys();\n      const iterator2 = projectsChecked.values();\n      let oneProjectAtleastChecked = false;\n      for (let i = 0; i < projectsChecked.size; i++) {\n          let selectedProject = iterator2.next().value;\n          let selectedProjectName = iterator1.next().value;\n        if (selectedProject && !projectsMatch) { //check whether the checkbox is still selected and project is matched in previous loop\n          oneProjectAtleastChecked = true;\n          if (((empProject.toLowerCase()).includes(selectedProjectName))) {\n            projectsMatch = true;\n            // console.log(\"true inside loop\");\n          } else {\n            projectsMatch = false;\n          }\n\n        } else if ((!oneProjectAtleastChecked) && (i === projectsChecked.size - 1)) { //if all the previous checked projects are unchecked\n          projectsMatch = true;  \n        }\n      }\n      if (projectsMatch){\n        return true;\n       }  \n       else{\n        return false;\n       }\n    } else {\n      return true;\n    }\n  }\n\n  //Hobbies match\n  // checkHobbiesMatch(hobbiesChecked,empHobbies){\n\n  //   if (hobbiesChecked.size > 0) {  //atleast one hobby is checked\n  //     const iterator1 = hobbiesChecked.keys();\n  //     const iterator2 = hobbiesChecked.values();\n  //     for (let i = 0; i < hobbiesChecked.size; i++) {  //checking all the checked hobby the emp has or not\n  //       let selectedHobby = iterator2.next().value;\n  //       let hobbyName = iterator1.next().value;\n  //       if (selectedHobby) {\n  //         if ( !(((empHobbies.toLowerCase()).includes(hobbyName))) ) {\n  //           return false;  //if one is not in the profile then return false\n  //         }\n  //       }\n  //     }\n  //     return true;\n  //   } else {\n  //     return true;\n  //   }\n  // }\n\n    //checking emp status match\n\n    checkEmpStatusMatch(EmployeeStatusChecked,EmpStatus){\n\n      let ESMatch = false;\n     if (EmployeeStatusChecked.size > 0) {\n      const iterator1 = EmployeeStatusChecked.keys();\n      const iterator2 = EmployeeStatusChecked.values();\n      let oneESAtleastChecked = false;\n      for (let i = 0; i < EmployeeStatusChecked.size; i++) {\n          let selectedES = iterator2.next().value; //true or false\n        let selectedESName = iterator1.next().value;\n\n        if (selectedES && !ESMatch) { //check whether the checkbox is still selected and pod is matched in previous loop\n          oneESAtleastChecked = true;\n            if(((EmpStatus.toLowerCase()).includes(\"left\"))){\n              EmpStatus = \"Alumni\";\n            }\n          if (((EmpStatus.toLowerCase()).includes(selectedESName))) {\n\n            ESMatch = true;\n            // console.log(\"true inside loop\");\n          } else {\n            ESMatch = false;\n          }\n\n        } else if ((!oneESAtleastChecked) && (i === EmployeeStatusChecked.size - 1)) { //if all the previous checked pods are unchecked\n          ESMatch = true;\n        }\n      }\n       if (ESMatch){\n        return true;\n       }  \n       else{\n        return false;\n       }  \n    } else {\n      return true;\n    }\n     \n    }\n\n\n    // checking Engagement Type match\n\n    checkEngagementTypeMatch(EngagementTypeChecked,EngagementType){\n\n      let ETMatch = false;\n      if (EngagementTypeChecked.size > 0) {\n       const iterator1 = EngagementTypeChecked.keys();\n       const iterator2 = EngagementTypeChecked.values();\n       let oneETAtleastChecked = false;\n       for (let i = 0; i < EngagementTypeChecked.size; i++) {\n           let selectedET = iterator2.next().value; //true or false\n         let selectedETName = iterator1.next().value;\n \n         if (selectedET && !ETMatch) { //check whether the checkbox is still selected and pod is matched in previous loop\n          oneETAtleastChecked = true;\n          if(((EngagementType).includes(\"T&amp;M\"))){\n            EngagementType = \"t&m\";\n          }\n          // console.log(EngagementType);\n          // console.log(selectedETName);\n           if (((EngagementType.toLowerCase()).includes(selectedETName))) {\n \n            ETMatch = true;\n            //  console.log(\"true inside loop\");\n           } else {\n            ETMatch = false;\n           }\n \n         } else if ((!oneETAtleastChecked) && (i === EngagementTypeChecked.size - 1)) { //if all the previous checked pods are unchecked\n          ETMatch = true;\n         }\n       }\n        if (ETMatch){\n         return true;\n        }  \n        else{\n         return false;\n        }  \n     } else {\n       return true;\n     }\n     \n    }\n\n    //checking billability match\n\n    checkBillableMatch(billableChecked,billable){\n\n      let billableMatch = false;\n      if (billableChecked.size > 0) {\n       const iterator1 = billableChecked.keys();\n       const iterator2 = billableChecked.values();\n       let oneBillableAtleastChecked = false;\n       for (let i = 0; i < billableChecked.size; i++) {\n           let selectedBillable = iterator2.next().value; //true or false\n         let selectedBillableName = iterator1.next().value;\n \n         if (selectedBillable && !billableMatch) { //check whether the checkbox is still selected and pod is matched in previous loop\n          oneBillableAtleastChecked = true;\n           if (((billable.toLowerCase()).includes(selectedBillableName))) {\n \n            billableMatch = true;\n            //  console.log(\"true inside loop\");\n           } else {\n            billableMatch = false;\n           }\n \n         } else if ((!oneBillableAtleastChecked) && (i === billableChecked.size - 1)) { //if all the previous checked pods are unchecked\n          billableMatch = true;\n         }\n       }\n        if (billableMatch){\n         return true;\n        }  \n        else{\n         return false;\n        }  \n     } else {\n       return true;\n     }\n     \n    }\n\n\n  filteringTheEmp(){\n    let Employees = this.state.Employees;\n    let expMinReq = this.state.ExperienceMinMax[0];\n    let expMaxReq = this.state.ExperienceMinMax[1];\n    let nameReq = this.state.name;\n    let skillsChecked = this.state.checkedItemsSkills;\n    let ManagersChecked = this.state.checkedItemsManager;\n    let podsChecked = this.state.checkedItemsPod;\n    let projectsChecked = this.state.checkedItemsProjects;\n    // let HobbbiesChecked = this.state.checkedItemsHobbies;\n    let EmpStatusChecked = this.state.checkedItemsEmpStatus;\n    let EngagementTypeChecked = this.state.checkedItemsEngagementType;\n    let billableChecked = this.state.checkedItemsBillable;\n\n    let filteredEmployee= [];\n    Employees.map(x => (\n      <>{((() => {\n        if (this.CheckExperience(x.Experience, expMinReq, expMaxReq)\n          && this.checkNameId(x.name, x.Emp_id, nameReq)\n          && this.checkPodsMatch(podsChecked, x.Pod)\n          && this.checkProjectMatch(projectsChecked, x.current_working_project)\n          && this.checkSkillsMatch(skillsChecked, x.primary_skills, x.secndary_skills)\n          && this.checkManagerMatch(ManagersChecked, x.Manager)\n          // && this.checkHobbiesMatch(HobbbiesChecked, x.hobbies)\n          && this.checkEmpStatusMatch(EmpStatusChecked, x.employment_status)\n          && this.checkEngagementTypeMatch(EngagementTypeChecked,x.engagement_model)\n          && this.checkBillableMatch(billableChecked,x.billable)\n          ) {\n          filteredEmployee.push(x);\n        }\n      })())}\n      </>\n    ))\n    return filteredEmployee;\n  }\n\n  FiltersHover(){\n    var x =  document.getElementById(\"filtersContainer\");\n    var y = document.getElementById(\"filterPage\");\n    var z = document.getElementById(\"filter-icon\");\n    // console.log(x.className);\n    if (x.className === \"reqForm\") {\n      x.className = \"filtersContainer\";\n      y.className = \"filter-containerMobile\";  \n      z.style.display = 'none';\n    } else {\n      x.className = \"reqForm\";\n      y.className = \"filter-container\";\n      z.style.display = 'block';\n    }\n  }\n\n\n  render() {\n    //initialisig the state variables for manipulations\n    let skillsFilterShowCust =this.state.skillsFilterShow;\n    let podsFilterShowCust =this.state.podsFilterShow;\n    let managersFilterShowCust =this.state.managersFilterShow;\n    let projectsFilterShowCust =this.state.projectsFilterShow;\n    let HobbiesFilterShowCust = this.state.HobbiesFilterShow;\n    let filteredEmployee = this.filteringTheEmp();\n    let checkedItemsTagList = this.AllCheckedItems();  //getting all the checked items and storing to make tags\n    // console.log(filteredEmployee);\n\n\n    return (\n      <>\n     \n      <div className=\"filter-container\" id=\"filterPage\">\n        {/* different types of filters  */}\n        <div className=\"filter-icon\"  onClick={() => this.FiltersHover()} >\n        <BsFillFunnelFill id=\"filter-icon\"></BsFillFunnelFill>\n        </div>\n        <Scrollbars \n        style={{ height: \"100%\" }}\n          onScroll={this.handleScroll}\n          autoHide     // Hide delay in ms\n          autoHideTimeout={1000}   // Duration for hide animation in ms.\n          autoHideDuration={200}\n        >\n        <div className=\"reqForm\" id=\"filtersContainer\">\n        <div className=\"filter-icon\" id=\"clear-icon\" onClick={() => this.FiltersHover()} >\n            <ClearIcon ></ClearIcon>\n        </div>\n          <form >\n          <div className=\"filtered-emp-count\">\n                <span className=\"filterName\">Employees: </span>\n                {/* <img alt=\"no of emp\" src={empGroup} style={{ height: \"20px\",  paddingLeft: \"10%\" }}></img> */}\n                <p className=\"empCount\">{filteredEmployee.length}</p>\n              </div>\n            {/* name or id input filed*/}\n              <TextField\n                id=\"outlined-basic\"\n                label=\"Enter name or Id\"\n                variant=\"outlined\"\n                // size=\"small\"\n                style={{ padding: \"10.5px 8px\", paddingLeft: 0, paddingBottom:0, width:\"100%\" }}\n                type=\"text\"\n                name=\"name\"\n                onChange={this.myChangeHandler}\n                className=\"InpcheckedItemsSkillsuttextField\"\n              />\n\n            {/* Experience slider*/}\n            <div className=\"Experience-overview\">\n              <p className=\"filterName\">Experience: </p>\n              <div className=\"exp-display\">\n              <p> {this.state.ExperienceMinMax[0]} - </p>\n              <p>  {this.state.ExperienceMinMax[1]} years</p>\n              </div>\n            </div>\n            <div  className=\"experienceSlider\" >\n              {/* <Typography id=\"range-slider\" gutterBottom>\n                </Typography> style={{ width: 180 }} */}\n              <Slider\n                defaultValue={[0, 25]}\n                value={this.ExperienceMinMax}\n                onChange={this.handleChange}\n                valueLabelDisplay=\"auto\"\n                aria-labelledby=\"range-slider\"\n                getAriaValueText={this.valueText}\n                step={1}\n                min={0}\n                max={45}\n                style={{color:\"#ff8c4b\"}}\n              />\n            </div>\n\n            {/*  skills checkboxes*/}\n            <p className=\"filterName\"  style={{ paddingTop: 2}}>Skills :</p>\n            <form >\n              <table className=\"CheckboxesTable\">\n                {\n                  this.state.skillsApi.slice(0, skillsFilterShowCust).map(item => (\n                    <tbody><tr>\n                      <td>\n                        <label>\n                          <input\n                            type=\"checkbox\"\n                            name='checkedItemsSkills'\n                            value={item.name.toLowerCase()}\n                            onChange={this.CheckBoxhandleChange}\n                            id={item.name.toLowerCase()}\n                          /> {item.name} ({item.count })\n                        </label>\n                      </td>\n                    </tr></tbody>\n                  ))\n                }\n                <tbody className=\"showMore\"\n                 onClick={this.showMoreSkills}>\n                  {this.state.skillsExpanded ? (\n                    <tr><td>show less</td></tr>\n                  ) : (\n                    <tr><td>show more</td></tr>\n                  )}\n                </tbody>\n              </table>\n            </form>\n\n            {/* Manager checkbox selection */}\n            <p className=\"filterName\" style={{ paddingTop: 2}}>Managers :</p>\n            <form >\n              <table className=\"CheckboxesTable\">\n                {\n                  this.state.MangersApi.slice(0, managersFilterShowCust).map(item => (\n                    <tbody><tr>\n                      <td>\n                        <label>\n                          <input\n                            name = 'checkedItemsManager'\n                            type=\"checkbox\"\n                            value={item.name.toLowerCase()}\n                            onChange={this.CheckBoxhandleChange}\n                            id={item.name.toLowerCase()}\n                            className=\"checkboxes\"\n                          /> {item.name } ({item.count })\n                        </label>\n                      </td>\n                    </tr></tbody>\n                  ))\n                }\n                  {(this.state.MangersApi.length > 10)?\n                  <tbody className=\"showMore\"\n                    onClick={this.showMoreManagers}>\n                    {this.state.managersExpanded ? (\n                      <tr><td>show less</td></tr>\n                    ) : (\n                      <tr><td>show more</td></tr>\n                    )}\n                  </tbody> \n                :<></>}\n              </table>\n            </form>\n\n            {/* Pods checkbox selection */}\n            <p className=\"filterName\">Pods :</p>\n            <form >\n              <table className=\"CheckboxesTable\">\n                {\n                  this.state.PodsApi.slice(0, podsFilterShowCust).map(item => (\n                   <tbody> <tr>\n                      <td>\n                        <label>\n                          <input\n                            name = 'checkedItemsPod'\n                            type=\"checkbox\"\n                            value={item.name.toLowerCase()}\n                            onChange={this.CheckBoxhandleChange}\n                            id={item.name.toLowerCase()}\n                          /> {item.name} ({item.count })\n                        </label>\n                      </td>\n                    </tr></tbody>\n                  ))\n                  }\n                  {(this.state.PodsApi.length > 10) ?\n                    <tbody className=\"showMore\"\n                      onClick={this.showMorePods}>\n                      {this.state.podsExpanded ? (\n                        <tr><td>show less</td></tr>\n                      ) : (\n                        <tr><td>show more</td></tr>\n                      )}\n                    </tbody>\n                    : <></>\n                  }\n              </table>\n            </form>\n\n            {/* projects checkbox selection */}\n            <p className=\"filterName\">projects :</p>\n            <form >\n              <table className=\"CheckboxesTable\">\n                {\n                  this.state.projectsApi.slice(0, projectsFilterShowCust).map(item => (\n                    <tbody><tr>\n                      <td>\n                        <label>\n                          <input\n                            name = 'checkedItemsProjects'\n                            type=\"checkbox\"\n                            value={item.name.toLowerCase()}\n                            onChange={this.CheckBoxhandleChange}\n                            id={item.name.toLowerCase()}\n                          /> {item.name.replace(\"&amp;\",\"&\")} ({item.count })\n                        </label>\n                      </td>\n                    </tr></tbody>\n                  ))\n                }\n                {(this.state.projectsApi.length > 10)?\n                  <tbody className=\"showMore\"\n                    onClick={this.showMoreProjects}>\n                    {this.state.projectsExpanded ? (\n                      <tr><td>show less</td></tr>\n                    ) : (\n                      <tr><td>show more</td></tr>\n                    )}\n                  </tbody> \n                :<></>}\n \n              </table>\n            </form>\n\n             {/* Hobbbies checkbox selection */}\n             {/* <p className=\"filterName\">Hobbies :</p>\n            <form >\n              <table className=\"CheckboxesTable\">\n                {\n                  this.state.hobbiesApi.slice(0, HobbiesFilterShowCust).map(item => (\n                    <tr>\n                      <td>\n                        <label>\n                          <input\n                            name = 'checkedItemsHobbies'\n                            type=\"checkbox\"\n                            value={item.name.toLowerCase()}\n                            onChange={this.CheckBoxhandleChange}\n                            id={item.name.toLowerCase()}\n                          /> {item.name} ({item.count })\n                        </label>\n                      </td>\n                    </tr>\n                  ))\n                  }\n                  {(this.state.hobbiesApi.length > 10) ?\n                    <p className=\"showMore\"\n                      onClick={this.showMoreHobbies}>\n                      {this.state.hobbiesExpanded ? (\n                        <span>show less</span>\n                      ) : (\n                        <span>show more</span>\n                      )}\n                    </p>\n                    : console.log(\"less hobbies\")\n                  }\n              </table>\n            </form> */}\n\n\n            {/* emp status checkbox selection */}\n            <p className=\"filterName\">Employee Status :</p>\n            <form >\n              <table className=\"CheckboxesTable\">\n                {\n                  this.state.employeeStatusApi.slice(0, HobbiesFilterShowCust).map(item => (\n                   <tbody> <tr>\n                      <td>\n                        <label>\n                          <input\n                            name = 'checkedItemsEmpStatus'\n                            type=\"checkbox\"\n                            value={item.name.toLowerCase()}\n                            onChange={this.CheckBoxhandleChange}\n                            id={item.name.toLowerCase()}\n                          /> {item.name} \n                        </label>\n                      </td>\n                    </tr></tbody>\n                  ))\n                  }\n                 \n              </table>\n            </form>\n\n       \n             {/* engagement model type checkbox selection */}\n             <p className=\"filterName\">Engagement Model :</p>\n            <form >\n              <table className=\"CheckboxesTable\">\n                {\n                  this.state.engagementTypeApi.map(item => (\n                   <tbody> <tr>\n                      <td>\n                        <label>\n                          <input\n                            name = 'checkedItemsEngagementType'\n                            type=\"checkbox\"\n                            value={item.name.toLowerCase()}\n                            onChange={this.CheckBoxhandleChange}\n                            id={item.name.toLowerCase()}\n                          /> {item.name} \n                        </label>\n                      </td>\n                    </tr></tbody>\n                  ))\n                  }\n                 \n              </table>\n            </form>\n\n             {/* Billable checkbox selection */}\n             <p className=\"filterName\">Billable :</p>\n            <form >\n              <table className=\"CheckboxesTable\">\n                {\n                  this.state.billableApi.map(item => (\n                   <tbody> <tr>\n                      <td>\n                        <label>\n                          <input\n                            name = 'checkedItemsBillable'\n                            type=\"checkbox\"\n                            value={item.name.toLowerCase()}\n                            onChange={this.CheckBoxhandleChange}\n                            id={item.name.toLowerCase()}\n                          /> {item.name} \n                        </label>\n                      </td>\n                    </tr></tbody>\n                  ))\n                  }\n                 \n              </table>\n            </form>\n\n\n          </form>\n         \n        </div>\n        </Scrollbars>\n        {/* //displaying */}\n        <Scrollbars \n        style={{ height: 600 }}\n          onScroll={this.handleScroll}\n          autoHide     // Hide delay in ms\n          autoHideTimeout={1000}   // Duration for hide animation in ms.\n          autoHideDuration={200}\n        >\n          <div className=\"Employees\">\n\n            {/* selected filters as tags */}\n            {/* {console.log(this.state.checkedItemsTag)} */}\n            {/* <div className=\"tagsAndEmpCountContainer\"> */}\n              <div className=\"selectedTags\">\n                {checkedItemsTagList.map(x => (\n                  <>\n                    {(\n                      (() => {\n                        return (\n                          (\n                            <>\n                              <Chip\n                                label={x.value}\n                                // icon={icon}\n                                onDelete={this.handleDelete(x)}\n                                className=\"tags\"\n                              />\n                            </>\n                          )\n                        )\n                      })()\n                    )}\n                  </>\n                ))\n                }\n              </div>\n              {/* <div className=\"filtered-emp-count\">\n                <img alt=\"no of emp\" src={empGroup} style={{ height: \"25%\" }}></img>\n                <p className=\"empCount\">{filteredEmployee.length}</p>\n              </div> */}\n            {/* </div> */}\n         \n              {filteredEmployee.length > 0 ? <></> :\n                <>\n                  {(\n                    (() => {\n                      return ( //no result found\n                        <div className='NoResult'>\n                          <img alt=\"No result found\" src={NoResult}></img>\n                        </div>\n                      )\n                    })())\n                  }\n                </>\n              }\n\n              {/* Filtered Employees displaying */}\n              {filteredEmployee.slice((this.state.currentPage * this.state.maxItemsPerPage) - this.state.maxItemsPerPage, this.state.currentPage * this.state.maxItemsPerPage).map(employee => (\n                <>\n                  {(\n                    (() => {\n                      return (\n                        (\n                          <EmployeeCard employee={employee}></EmployeeCard>\n                        )\n                      )\n                    })()\n                  )}\n                </>\n              ))\n              }\n           \n          </div>\n          </Scrollbars>\n        </div>\n        {/* next page or back button for viewing the cards */}\n        <div className=\"nextBack\">\n          {this.state.currentPage > 1 ?\n            <button className=\"nextBackBttn\" onClick={() => this.changePage('back')}>&laquo; </button>\n            : null}{<button className=\"nextBackBttn\">{this.state.currentPage}</button>}\n          {filteredEmployee.length > this.state.currentPage * this.state.maxItemsPerPage ?\n            <button className=\"nextBackBttn\" onClick={() => this.changePage('next')}> &raquo;</button>\n            : null}\n        </div>\n      </>\n    );\n  }\n}"]},"metadata":{},"sourceType":"module"}