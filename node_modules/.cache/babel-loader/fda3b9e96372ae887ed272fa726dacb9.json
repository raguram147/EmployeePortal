{"ast":null,"code":"var _jsxFileName = \"/home/gurramkonda_y/Desktop/react/lister-home/src/components/FilterPage.js\";\nimport React, { Component } from 'react';\nimport '../components/styles/FilterPage.css';\nimport config from '../config';\nimport Typography from '@material-ui/core/Typography';\nimport Slider from '@material-ui/core/Slider';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default class EmployeeView extends Component {\n  constructor(props) {\n    super(props);\n\n    this.valueText = value => {\n      return `${value}`;\n    };\n\n    this.handleChange = (e, newValue) => {\n      console.log(newValue);\n      this.setState({\n        ExperienceMinMax: newValue\n      });\n    };\n\n    this.myChangeHandler = event => {\n      let nam = event.target.name;\n      let val = event.target.value;\n      this.setState({\n        [nam]: val\n      });\n    };\n\n    this.state = {\n      Employees: [],\n      skillsApi: [],\n      MangersApi: [],\n      PodApi: [],\n      skills: [],\n      name: '',\n      Experience: null,\n      PrimarySkill: '',\n      ExperienceManuallyMax: null,\n      ExperienceManuallyMin: null,\n      checkedItemsSkills: new Map(),\n      checkedItemsManager: new Map(),\n      checkedItemsPod: new Map(),\n      ExperienceMinMax: [0, 25]\n    };\n    this.SkillhandleChange = this.SkillhandleChange.bind(this);\n    this.ManagerHandleChange = this.ManagerHandleChange.bind(this);\n    this.PodsHandleChange = this.ManagerHandleChange.bind(this); // this.handleSubmit = this.handleSubmit.bind(this);  \n  }\n\n  componentDidMount() {\n    Promise.all([fetch(config.drupal_url + '/lister/Employees').then(res => res.json()), fetch(config.drupal_url + '/lister/Taxonomy/skills').then(res => res.json()), fetch(config.drupal_url + '/lister/Taxonomy/manager').then(res => res.json()), fetch(config.drupal_url + '/lister/Taxonomy/pod').then(res => res.json())]).then(([urlOneData, urlTwoData, urlThreeData, urlFourData]) => {\n      this.setState({\n        Employees: urlOneData,\n        skillsApi: urlTwoData,\n        MangersApi: urlThreeData,\n        PodApi: urlFourData\n      });\n    });\n  }\n\n  SkillhandleChange(event) {\n    //skills checkeditems change\n    var isChecked = event.target.checked;\n    var item = event.target.value;\n    this.setState(prevState => ({\n      checkedItemsSkills: prevState.checkedItemsSkills.set(item, isChecked)\n    }));\n  }\n\n  ManagerHandleChange(event) {\n    //skills checkeditems change\n    var isChecked = event.target.checked;\n    var item = event.target.value;\n    this.setState(prevState => ({\n      checkedItemsManager: prevState.checkedItemsManager.set(item, isChecked)\n    }));\n  }\n\n  render() {\n    let Employees = this.state.Employees;\n    let experienceMin, experienceMax;\n    let expMinReq = this.state.ExperienceMinMax[0];\n    let expMaxReq = this.state.ExperienceMinMax[1];\n    let nameReq = this.state.name;\n    let PrimarySkillReq = this.state.PrimarySkill;\n    let primaryskillsChecked = this.state.checkedItemsSkills;\n    let ManagersChecked = this.state.checkedItemsManager; // this.state.skills.filter(onlyUnique);removeusingSet(array)\n\n    console.log(this.state.checkedItemsSkills);\n    console.log(ManagersChecked);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"filter-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"reqForm\",\n        children: /*#__PURE__*/_jsxDEV(\"form\", {\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"filterName\",\n            children: \"Enter name or Id:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            name: \"name\",\n            onChange: this.myChangeHandler,\n            className: \"InputtextField\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"Experience-overview\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"filterName\",\n              children: \"Experience: \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 105,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\" \", this.state.ExperienceMinMax[0], \" - \"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 106,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"  \", this.state.ExperienceMinMax[1], \" years\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 107,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              width: 150\n            },\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              id: \"range-slider\",\n              gutterBottom: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 110,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Slider, {\n              defaultValue: [0, 25],\n              value: this.ExperienceMinMax,\n              onChange: this.handleChange,\n              valueLabelDisplay: \"auto\",\n              \"aria-labelledby\": \"range-slider\",\n              getAriaValueText: this.valueText,\n              step: 1,\n              min: 0,\n              max: 40\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 115,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"filterName\",\n            children: \"Skills :\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 129,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n            children: /*#__PURE__*/_jsxDEV(\"table\", {\n              className: \"PrimarySkillsTableCB\",\n              children: this.state.skillsApi.map(item => /*#__PURE__*/_jsxDEV(\"tr\", {\n                children: /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: /*#__PURE__*/_jsxDEV(\"label\", {\n                    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                      type: \"checkbox\",\n                      value: item.name.toLowerCase(),\n                      onChange: this.SkillhandleChange\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 141,\n                      columnNumber: 23\n                    }, this), \" \", item.name]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 140,\n                    columnNumber: 21\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 138,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 137,\n                columnNumber: 19\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 133,\n              columnNumber: 13\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 132,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"filterName\",\n            children: \"Managers :\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 156,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n            children: /*#__PURE__*/_jsxDEV(\"table\", {\n              className: \"PrimarySkillsTableCB\",\n              children: this.state.MangersApi.map(item => /*#__PURE__*/_jsxDEV(\"tr\", {\n                children: /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: /*#__PURE__*/_jsxDEV(\"label\", {\n                    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                      type: \"checkbox\",\n                      value: item.name.toLowerCase(),\n                      onChange: this.ManagerHandleChange\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 166,\n                      columnNumber: 23\n                    }, this), \" \", item.name]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 165,\n                    columnNumber: 21\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 163,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 162,\n                columnNumber: 19\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 158,\n              columnNumber: 13\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 157,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"Employees\",\n        children: Employees.map(x => /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: (() => {\n            var experienceMatch = false;\n            var primarySkillsMatch = false;\n            var secondarySkillsMatch = false;\n            var nameMatch = false;\n            var idMatch = false;\n            var managerMatch = false; //experience checking: whether the emp has meet the req experience of customer\n\n            if (parseInt(x.Experience) >= expMinReq && parseInt(x.Experience) <= expMaxReq) {\n              experienceMatch = true;\n            } //name checking: whether the emp has matched the name\n\n\n            if (nameReq) {\n              if (x.name.toLowerCase().includes(nameReq.toLowerCase()) || x.Emp_id.includes(nameReq)) {\n                nameMatch = true; //   console.log(\"nameMatch\"+x.name+\" \"+nameReq);\n              } else {\n                return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n              }\n            } else {\n              nameMatch = true; //if customer not typed anything\n            } //Primary skills checking: whether the emp has req primary skills\n\n\n            if (PrimarySkillReq) {\n              if (x.primary_skills.toLowerCase().includes(PrimarySkillReq.toLowerCase())) {\n                primarySkillsMatch = true;\n              }\n            } else {\n              primarySkillsMatch = true;\n            } // skills checking: whether the emp has req  skills\n\n\n            if (primaryskillsChecked.size > 0) {\n              const iterator1 = primaryskillsChecked.keys();\n              const iterator2 = primaryskillsChecked.values(); // console.log(iterator1.next().value);\n              // console.log(iterator2.next().value);\n\n              for (let i = 0; i < primaryskillsChecked.size; i++) {\n                if (iterator2.next().value) {\n                  // console.log(iterator1.next().value);\n                  let ps = iterator1.next().value;\n                  console.log(ps);\n                  console.log(x.primary_skills.toLowerCase());\n\n                  if (x.primary_skills.toLowerCase().includes(ps) || x.secndary_skills.toLowerCase().includes(ps)) {\n                    primarySkillsMatch = true;\n                    console.log(\"true\");\n                  } else {\n                    console.log(\"false\");\n                    return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n                  }\n                } else {\n                  console.log(iterator1.next().value); //don't uncomment this line if u want remove console.log\n                }\n              }\n            } else {\n              primarySkillsMatch = true;\n            } //managers Match\n\n\n            if (ManagersChecked.size > 0) {\n              const iterator1 = ManagersChecked.keys();\n              const iterator2 = ManagersChecked.values();\n              let oneManagerAtleastChecked = false;\n\n              for (let i = 0; i < ManagersChecked.size; i++) {\n                //   let selectedManger = iterator2.next().value;\n                if (iterator2.next().value && !managerMatch) {\n                  oneManagerAtleastChecked = true;\n                  let ps = iterator1.next().value;\n                  console.log(ps);\n                  console.log(x.Manager.toLowerCase());\n\n                  if (x.Manager.toLowerCase().includes(ps)) {\n                    managerMatch = true;\n                    console.log(\"true inside loop\");\n                  } else {\n                    managerMatch = false;\n                  }\n                } else if (!oneManagerAtleastChecked && i == ManagersChecked.size - 1) {\n                  managerMatch = true;\n                  console.log(iterator1.next().value); //don't comment this line if u want remove console.log\n                } else {\n                  console.log(iterator1.next().value); //don't comment this line if u want remove console.log\n                }\n              }\n            } else {\n              managerMatch = true;\n            }\n\n            console.log(managerMatch);\n\n            if (experienceMatch && nameMatch && primarySkillsMatch && managerMatch) {\n              return /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"Employee-details\",\n                children: [/*#__PURE__*/_jsxDEV(\"img\", {\n                  src: `http://localhost/${x.Profile_photo}`,\n                  height: \"200\",\n                  alt: \"profilephoto\",\n                  className: \"profilephoto\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 298,\n                  columnNumber: 25\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"Employee-description\",\n                  children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                    className: \"Name\",\n                    children: x.name\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 303,\n                    columnNumber: 27\n                  }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                    children: x.role\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 305,\n                    columnNumber: 27\n                  }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                    children: [\"Manager: \", x.Manager]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 306,\n                    columnNumber: 27\n                  }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                    children: [\"Experience: \", x.Experience, \" years\"]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 308,\n                    columnNumber: 27\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 302,\n                  columnNumber: 25\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  className: \"Details-Btn\",\n                  children: /*#__PURE__*/_jsxDEV(\"a\", {\n                    href: '/EmployeeDetails/' + x.Emp_id,\n                    children: \"Show Details\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 311,\n                    columnNumber: 57\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 311,\n                  columnNumber: 25\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 292,\n                columnNumber: 24\n              }, this);\n            }\n          })()\n        }, void 0, false))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/home/gurramkonda_y/Desktop/react/lister-home/src/components/FilterPage.js"],"names":["React","Component","config","Typography","Slider","EmployeeView","constructor","props","valueText","value","handleChange","e","newValue","console","log","setState","ExperienceMinMax","myChangeHandler","event","nam","target","name","val","state","Employees","skillsApi","MangersApi","PodApi","skills","Experience","PrimarySkill","ExperienceManuallyMax","ExperienceManuallyMin","checkedItemsSkills","Map","checkedItemsManager","checkedItemsPod","SkillhandleChange","bind","ManagerHandleChange","PodsHandleChange","componentDidMount","Promise","all","fetch","drupal_url","then","res","json","urlOneData","urlTwoData","urlThreeData","urlFourData","isChecked","checked","item","prevState","set","render","experienceMin","experienceMax","expMinReq","expMaxReq","nameReq","PrimarySkillReq","primaryskillsChecked","ManagersChecked","width","map","toLowerCase","x","experienceMatch","primarySkillsMatch","secondarySkillsMatch","nameMatch","idMatch","managerMatch","parseInt","includes","Emp_id","primary_skills","size","iterator1","keys","iterator2","values","i","next","ps","secndary_skills","oneManagerAtleastChecked","Manager","Profile_photo","role"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport '../components/styles/FilterPage.css';\nimport config from '../config';\nimport Typography from '@material-ui/core/Typography';\nimport Slider from '@material-ui/core/Slider';\n\n\nexport default class EmployeeView extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      Employees: [],\n      skillsApi: [],\n      MangersApi: [],\n      PodApi:[],\n      skills: [],\n      name: '',\n      Experience: null,\n      PrimarySkill: '',\n      ExperienceManuallyMax: null,\n      ExperienceManuallyMin: null,\n      checkedItemsSkills: new Map(),\n      checkedItemsManager: new Map(),\n      checkedItemsPod: new Map(),\n      ExperienceMinMax: [0, 25],\n    }\n\n    this.SkillhandleChange = this.SkillhandleChange.bind(this);  \n    this.ManagerHandleChange = this.ManagerHandleChange.bind(this);  \n    this.PodsHandleChange = this.ManagerHandleChange.bind(this);\n    // this.handleSubmit = this.handleSubmit.bind(this);  \n  }\n\n  componentDidMount() {\n    Promise.all([\n      fetch(config.drupal_url+'/lister/Employees').then(res => res.json()),\n      fetch(config.drupal_url+'/lister/Taxonomy/skills').then(res => res.json()),\n      fetch(config.drupal_url+'/lister/Taxonomy/manager').then(res => res.json()),\n      fetch(config.drupal_url+'/lister/Taxonomy/pod').then(res => res.json())\n    ]).then(([urlOneData, urlTwoData, urlThreeData, urlFourData]) => {\n      this.setState({\n        Employees: urlOneData,\n        skillsApi: urlTwoData,\n        MangersApi: urlThreeData,\n        PodApi:urlFourData\n      });\n    })\n  }\n\n    valueText = (value) => {\n        return `${value}`;\n    };\n    handleChange = (e, newValue) => {\n        console.log(newValue);\n        this.setState({ ExperienceMinMax: newValue });\n    };\n\n  myChangeHandler = (event) => {\n    let nam = event.target.name;\n    let val = event.target.value;\n    this.setState({ [nam]: val });\n  }\n\n\n  SkillhandleChange(event) {   //skills checkeditems change\n    var isChecked = event.target.checked;\n    var item = event.target.value;\n    this.setState(prevState => ({ checkedItemsSkills: prevState.checkedItemsSkills.set(item, isChecked) }));\n  }\n\n  ManagerHandleChange(event) {   //skills checkeditems change\n    var isChecked = event.target.checked;\n    var item = event.target.value;\n    this.setState(prevState => ({ checkedItemsManager: prevState.checkedItemsManager.set(item, isChecked) }));\n  }\n\n\n  render() {\n    let Employees = this.state.Employees;\n    let experienceMin, experienceMax;\n    let expMinReq = this.state.ExperienceMinMax[0];\n    let expMaxReq = this.state.ExperienceMinMax[1];\n    let nameReq = this.state.name;\n    let PrimarySkillReq = this.state.PrimarySkill;\n    let primaryskillsChecked = this.state.checkedItemsSkills;\n    let ManagersChecked = this.state.checkedItemsManager;\n    // this.state.skills.filter(onlyUnique);removeusingSet(array)\n    console.log((this.state.checkedItemsSkills));\n    console.log((ManagersChecked));\n\n    return (\n      <div className=\"filter-container\">\n        <div className=\"reqForm\">\n          <form >\n            <p className=\"filterName\">Enter name or Id:</p>\n            <input\n              type='text'\n              name='name'\n              onChange={this.myChangeHandler}\n              className=\"InputtextField\" \n            />\n\n            <div className=\"Experience-overview\">\n            <p className=\"filterName\">Experience: </p>\n            <p> {this.state.ExperienceMinMax[0]} - </p>\n              <p>  {this.state.ExperienceMinMax[1]} years</p>\n            </div>\n            <div  style={{width:150}} >\n                <Typography id=\"range-slider\" gutterBottom>\n                {/* Experience */}\n                {/* <p>{this.state.ExperienceMinMax[0]} \n                {this.state.ExperienceMinMax[1]}</p> */}\n                </Typography>\n                <Slider\n                defaultValue={[0, 25]}\n                value={this.ExperienceMinMax}\n                onChange={this.handleChange}\n                valueLabelDisplay=\"auto\"\n                aria-labelledby=\"range-slider\"\n                getAriaValueText={this.valueText}\n                step={1}\n                min={0}\n                max={40}\n                />\n            </div>\n\n            {/* Priamry skills */}\n            <p className=\"filterName\">Skills :</p>\n         \n\n            <form >\n            <table className=\"PrimarySkillsTableCB\">\n              {\n                \n                this.state.skillsApi.map(item => (\n                  <tr>\n                    <td>\n                  {/* <li>? */}\n                    <label>\n                      <input\n                        type=\"checkbox\"\n                        value={item.name.toLowerCase()}\n                        onChange={this.SkillhandleChange}\n                      /> {item.name}\n                    </label>\n                   {/* </li> */}\n                   </td>\n                   </tr>\n                ))\n              }\n            </table>\n            </form>\n\n            {/* Manager checkbox selection */}\n            <p className=\"filterName\">Managers :</p>\n            <form >\n            <table className=\"PrimarySkillsTableCB\">\n              {\n                \n                this.state.MangersApi.map(item => (\n                  <tr>\n                    <td>\n                  {/* <li>? */}\n                    <label>\n                      <input\n                        type=\"checkbox\"\n                        value={item.name.toLowerCase()}\n                        onChange={this.ManagerHandleChange}\n                      /> {item.name}\n                    </label>\n                   {/* </li> */}\n                   </td>\n                   </tr>\n                ))\n              }\n            </table>\n            </form>\n  \n\n\n          </form>\n        </div>\n\n        <div className=\"Employees\">\n          {Employees.map(x => (\n            <>\n              {(\n                (() => {\n                  var experienceMatch = false;\n                  var primarySkillsMatch = false;\n                  var secondarySkillsMatch = false;\n                  var nameMatch = false;\n                  var idMatch = false;\n                  var managerMatch = false;\n                  //experience checking: whether the emp has meet the req experience of customer\n                  if ((((parseInt(x.Experience)) >= expMinReq) && (parseInt(x.Experience) <= expMaxReq))) {\n                    experienceMatch = true;\n                  }\n\n                  //name checking: whether the emp has matched the name\n                  if (nameReq) {\n                    if (((x.name.toLowerCase()).includes(nameReq.toLowerCase())) || x.Emp_id.includes(nameReq)) {\n                      nameMatch = true;\n                    //   console.log(\"nameMatch\"+x.name+\" \"+nameReq);\n                    }else{\n                        return <></>\n                    }\n                  } else {\n                    nameMatch = true;     //if customer not typed anything\n                  }\n\n                  //Primary skills checking: whether the emp has req primary skills\n                  if (PrimarySkillReq) {\n                    if ((x.primary_skills.toLowerCase()).includes(PrimarySkillReq.toLowerCase())) {\n                      primarySkillsMatch = true;\n                    }\n                  } else {\n                    primarySkillsMatch = true;\n                  }\n\n                  // skills checking: whether the emp has req  skills\n                 \n                  if (primaryskillsChecked.size >0) {\n                    const iterator1 = primaryskillsChecked.keys();\n                    const iterator2 = primaryskillsChecked.values();\n                \n                    // console.log(iterator1.next().value);\n                    // console.log(iterator2.next().value);\n                    for(let i=0; i<primaryskillsChecked.size;i++){\n                      \n                        if(iterator2.next().value){\n                          // console.log(iterator1.next().value);\n                          let ps = iterator1.next().value;\n                          console.log(ps);\n                          console.log(x.primary_skills.toLowerCase());\n                       \n                          if ( ((x.primary_skills.toLowerCase()).includes(ps)) || ((x.secndary_skills.toLowerCase()).includes(ps))) {\n                            \n                            primarySkillsMatch = true;\n                            console.log(\"true\");\n                          }else{\n                            console.log(\"false\");\n                            return (<></>);\n                          }\n\n                        }else{\n                          console.log(iterator1.next().value);  //don't uncomment this line if u want remove console.log\n                        }\n                    }\n                  } else {\n                    primarySkillsMatch = true;\n                  }\n\n                  //managers Match\n                if (ManagersChecked.size >0) {\n                    const iterator1 = ManagersChecked.keys();\n                    const iterator2 = ManagersChecked.values();\n                    let oneManagerAtleastChecked = false;\n                  for(let i=0; i<ManagersChecked.size;i++){\n                    //   let selectedManger = iterator2.next().value;\n                    if(iterator2.next().value && !managerMatch){\n                       oneManagerAtleastChecked = true;\n                      let ps = iterator1.next().value;\n                      console.log(ps);\n                      console.log(x.Manager.toLowerCase());\n                   \n                      if ( ((x.Manager.toLowerCase()).includes(ps)) ) {\n                        \n                        managerMatch = true;\n                        console.log(\"true inside loop\");\n                      }else{\n                        managerMatch = false;\n                      }\n\n                    }else if((!oneManagerAtleastChecked) && (i==ManagersChecked.size-1)){\n                        managerMatch = true;\n                      console.log(iterator1.next().value);  //don't comment this line if u want remove console.log\n                    }else{\n                        console.log(iterator1.next().value);//don't comment this line if u want remove console.log\n                    }\n                    }\n                } else {\n                    managerMatch = true;\n                }\n                console.log(managerMatch);\n\n\n                  if (experienceMatch && nameMatch && primarySkillsMatch && managerMatch) {\n\n                    return (\n                      (<div className=\"Employee-details\">\n                        {/* {nameReq}\n                        { console.log(x.Experience )} \n                        { console.log(experienceMin )} \n                        { console.log(experienceMax )}  */}\n\n                        <img src={`http://localhost/${x.Profile_photo}`}\n                          height='200' alt=\"profilephoto\"\n                          className=\"profilephoto\" />\n                        {/* {x.name} */}\n                        <div className=\"Employee-description\">\n                          <p className=\"Name\">{x.name}</p>\n                          {/* <p>{ x.Emp_id }</p> */}\n                          <p>{x.role}</p>\n                          <p>Manager: {x.Manager}</p>\n\n                          <p>Experience: {x.Experience} years</p>\n\n                        </div>\n                        <button className=\"Details-Btn\"><a href={'/EmployeeDetails/' + x.Emp_id}>Show Details</a></button>\n                        {/* <Link to={{ pathname: \"/EmployeeView\", state: '{ x.Emp_id }' }}>{ x.name }</Link> */}\n\n                      </div>)\n                    )\n                  }\n                })()\n              )}\n\n            </>\n          ))\n          }\n        </div>\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}